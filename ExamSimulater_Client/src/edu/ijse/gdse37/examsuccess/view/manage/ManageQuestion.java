/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.examsuccess.view.manage;

import edu.ijse.gdse37.examsuccess.model.Batch;
import edu.ijse.gdse37.examsuccess.model.Cemester;
import edu.ijse.gdse37.examsuccess.model.Question;
import edu.ijse.gdse37.examsuccess.model.Subject;
import edu.ijse.gdse37.examsuccess.view.student.Add_Student_Panal;
import edu.ijse.gdse37.examsuccess.connecter.ServerConnecter;
import edu.ijse.gdse37.examsuccess.controller.BatchController;
import edu.ijse.gdse37.examsuccess.controller.ExamController;
import edu.ijse.gdse37.examsuccess.controller.SemesterController;
import edu.ijse.gdse37.examsuccess.controller.QuestionController;
import edu.ijse.gdse37.examsuccess.controller.StudentController;
import edu.ijse.gdse37.examsuccess.controller.SubjectController;
import edu.ijse.gdse37.examsuccess.view.other.Relese;
import java.awt.Color;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ashan Tharuka
 */
public class ManageQuestion extends javax.swing.JPanel {

    private int i;
    private static String path;
    private static String fileName;

    private String qA;
    private String qB;
    private String qC;
    private String qD;
    private boolean stopIncrement;
    private static String paperId;
    private String type;
    private static ArrayList<Question> questionList;

    /**
     * Creates new form MainAdmin
     */
    private Relese relese;
    private String code;

    /**
     *
     * @param relese
     */
    public ManageQuestion(Relese relese) {
        initComponents();
        setSize(990, 600);
        fillCombo();
        getpapersName();
        i = 1;
        qNumText.setText(Integer.toString(i));
        this.relese = relese;

        pIdText.setEditable(false);
        questionList = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        goText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        aText = new javax.swing.JTextField();
        bText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cText = new javax.swing.JTextField();
        dText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pIdText = new javax.swing.JTextField();
        matchLabel = new javax.swing.JLabel();
        aa = new javax.swing.JRadioButton();
        cc = new javax.swing.JRadioButton();
        dd = new javax.swing.JRadioButton();
        bb = new javax.swing.JRadioButton();
        publishLabel = new javax.swing.JLabel();
        publishButton = new javax.swing.JLabel();
        unpublishButton = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        batchCombo = new javax.swing.JComboBox();
        cemesterCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox();
        typeCombo = new javax.swing.JComboBox();
        nameText = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        qNumText = new javax.swing.JTextField();
        updateButton = new javax.swing.JLabel();
        backButton = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainQText = new javax.swing.JTextArea();
        nextButton = new javax.swing.JLabel();
        clearButton1 = new javax.swing.JLabel();
        getLastQButton = new javax.swing.JLabel();
        getSelectedQButton = new javax.swing.JLabel();
        saveButton = new javax.swing.JLabel();
        deletePaperButton = new javax.swing.JLabel();
        deleteQButton = new javax.swing.JLabel();
        viewPaperButton = new javax.swing.JLabel();

        setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(770, 540));
        jPanel2.setPreferredSize(new java.awt.Dimension(990, 600));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        goText.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        goText.setForeground(new java.awt.Color(0, 0, 204));
        goText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        goText.setText("Search Question");
        goText.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 255)));
        goText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                goTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                goTextFocusLost(evt);
            }
        });
        goText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goTextActionPerformed(evt);
            }
        });
        jPanel2.add(goText, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 440, 180, 40));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("A :");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 55, 42));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("B :");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 340, 55, 39));
        jPanel2.add(aText, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 290, 470, 42));

        bText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTextActionPerformed(evt);
            }
        });
        jPanel2.add(bText, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 340, 470, 41));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("C :");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 390, 55, 43));
        jPanel2.add(cText, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 470, 41));
        jPanel2.add(dText, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 470, 41));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText(" D :");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 440, 61, 42));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Question :");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 90, 30));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Question Number :");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 120, 30));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Paper Id :");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 100, -1, 30));

        pIdText.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        pIdText.setForeground(new java.awt.Color(0, 0, 255));
        pIdText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(pIdText, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, 70, 30));

        matchLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        matchLabel.setForeground(new java.awt.Color(255, 0, 51));
        jPanel2.add(matchLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 90, 320, 50));

        aa.setBackground(new java.awt.Color(255, 255, 255));
        aa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aaActionPerformed(evt);
            }
        });
        jPanel2.add(aa, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 290, 40, 40));

        cc.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(cc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 40, 40));

        dd.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(dd, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 40, 40));

        bb.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.add(bb, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 40, 40));

        publishLabel.setBackground(new java.awt.Color(255, 255, 255));
        publishLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        publishLabel.setForeground(new java.awt.Color(204, 0, 0));
        publishLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publishLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 0, 0)));
        publishLabel.setOpaque(true);
        jPanel2.add(publishLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 560, 650, 40));

        publishButton.setBackground(new java.awt.Color(255, 204, 0));
        publishButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        publishButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        publishButton.setText("Publish");
        publishButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        publishButton.setOpaque(true);
        publishButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                publishButtonMouseClicked(evt);
            }
        });
        jPanel2.add(publishButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 560, 180, 40));

        unpublishButton.setBackground(new java.awt.Color(255, 204, 0));
        unpublishButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        unpublishButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unpublishButton.setText("Unpublish");
        unpublishButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        unpublishButton.setOpaque(true);
        unpublishButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unpublishButtonMouseClicked(evt);
            }
        });
        jPanel2.add(unpublishButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 560, 160, 40));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Batch");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 150, 40));

        batchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                batchComboItemStateChanged(evt);
            }
        });
        batchCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchComboMouseClicked(evt);
            }
        });
        jPanel2.add(batchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 150, 30));

        cemesterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cemesterComboItemStateChanged(evt);
            }
        });
        cemesterCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cemesterComboMouseClicked(evt);
            }
        });
        jPanel2.add(cemesterCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 170, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cemester");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 0, 170, 40));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Subject");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 140, 40));

        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        subjectCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectComboMouseClicked(evt);
            }
        });
        jPanel2.add(subjectCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 40, 140, 30));

        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        typeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeComboMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                typeComboMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                typeComboMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                typeComboMouseReleased(evt);
            }
        });
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });
        jPanel2.add(typeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 120, 30));
        jPanel2.add(nameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 40, 120, 30));

        okButton.setText("OK");
        okButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonMouseClicked(evt);
            }
        });
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel2.add(okButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 40, -1, 30));

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Enter paper Name");
        jPanel2.add(nameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 0, 120, 40));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Paper");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, 120, 40));

        qNumText.setEditable(false);
        qNumText.setBackground(new java.awt.Color(255, 255, 255));
        qNumText.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        qNumText.setForeground(new java.awt.Color(0, 0, 255));
        qNumText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(qNumText, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 101, 40, 30));

        updateButton.setBackground(new java.awt.Color(102, 102, 102));
        updateButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateButton.setText("<html>Update Q<br>");
        updateButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateButton.setMinimumSize(new java.awt.Dimension(110, 50));
        updateButton.setOpaque(true);
        updateButton.setPreferredSize(new java.awt.Dimension(110, 50));
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateButtonMouseExited(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, 130, 40));

        backButton.setBackground(new java.awt.Color(171, 227, 247));
        backButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/backButton.png"))); // NOI18N
        backButton.setText("<html>Back <br>");
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backButton.setMinimumSize(new java.awt.Dimension(110, 50));
        backButton.setPreferredSize(new java.awt.Dimension(110, 50));
        backButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backButtonMouseExited(evt);
            }
        });
        jPanel2.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 490, 150, 60));

        mainQText.setColumns(20);
        mainQText.setRows(5);
        mainQText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mainQTextKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(mainQText);

        jScrollPane2.setViewportView(jScrollPane1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 160, 670, 110));

        nextButton.setBackground(new java.awt.Color(171, 227, 247));
        nextButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        nextButton.setForeground(new java.awt.Color(255, 255, 255));
        nextButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/requestButton.png"))); // NOI18N
        nextButton.setText("<html>Next <br>");
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setMinimumSize(new java.awt.Dimension(110, 50));
        nextButton.setPreferredSize(new java.awt.Dimension(110, 50));
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                nextButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                nextButtonMouseExited(evt);
            }
        });
        jPanel2.add(nextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 490, 160, 60));

        clearButton1.setBackground(new java.awt.Color(171, 227, 247));
        clearButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearButton1.setForeground(new java.awt.Color(255, 255, 255));
        clearButton1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clearButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/clearButton.png"))); // NOI18N
        clearButton1.setText("<html>Clear All <br>");
        clearButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButton1.setMinimumSize(new java.awt.Dimension(110, 50));
        clearButton1.setPreferredSize(new java.awt.Dimension(110, 50));
        clearButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButton1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                clearButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clearButton1MouseExited(evt);
            }
        });
        jPanel2.add(clearButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 490, 110, 60));

        getLastQButton.setBackground(new java.awt.Color(102, 102, 102));
        getLastQButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        getLastQButton.setForeground(new java.awt.Color(255, 255, 255));
        getLastQButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getLastQButton.setText("<html>Get Last Question <br>");
        getLastQButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getLastQButton.setMinimumSize(new java.awt.Dimension(110, 50));
        getLastQButton.setOpaque(true);
        getLastQButton.setPreferredSize(new java.awt.Dimension(110, 50));
        getLastQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getLastQButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                getLastQButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                getLastQButtonMouseExited(evt);
            }
        });
        jPanel2.add(getLastQButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 290, 180, 40));

        getSelectedQButton.setBackground(new java.awt.Color(102, 102, 102));
        getSelectedQButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        getSelectedQButton.setForeground(new java.awt.Color(255, 255, 255));
        getSelectedQButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getSelectedQButton.setText("<html>Get Selected Questions<br>");
        getSelectedQButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getSelectedQButton.setMinimumSize(new java.awt.Dimension(110, 50));
        getSelectedQButton.setOpaque(true);
        getSelectedQButton.setPreferredSize(new java.awt.Dimension(110, 50));
        getSelectedQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getSelectedQButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                getSelectedQButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                getSelectedQButtonMouseExited(evt);
            }
        });
        jPanel2.add(getSelectedQButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 340, 180, 40));

        saveButton.setBackground(new java.awt.Color(102, 102, 102));
        saveButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        saveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveButton.setText("<html>Save Q<br>");
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setMinimumSize(new java.awt.Dimension(110, 50));
        saveButton.setOpaque(true);
        saveButton.setPreferredSize(new java.awt.Dimension(110, 50));
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveButtonMouseExited(evt);
            }
        });
        jPanel2.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 390, 180, 40));

        deletePaperButton.setBackground(new java.awt.Color(102, 102, 102));
        deletePaperButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deletePaperButton.setForeground(new java.awt.Color(255, 255, 255));
        deletePaperButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deletePaperButton.setText("Delete Paper");
        deletePaperButton.setOpaque(true);
        deletePaperButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletePaperButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deletePaperButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deletePaperButtonMouseExited(evt);
            }
        });
        jPanel2.add(deletePaperButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 290, 130, 40));

        deleteQButton.setBackground(new java.awt.Color(102, 102, 102));
        deleteQButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteQButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteQButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteQButton.setText("Delete Q");
        deleteQButton.setOpaque(true);
        deleteQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteQButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteQButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteQButtonMouseExited(evt);
            }
        });
        jPanel2.add(deleteQButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 340, 130, 40));

        viewPaperButton.setBackground(new java.awt.Color(102, 102, 102));
        viewPaperButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewPaperButton.setForeground(new java.awt.Color(255, 255, 255));
        viewPaperButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        viewPaperButton.setText("View Paper");
        viewPaperButton.setOpaque(true);
        viewPaperButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewPaperButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                viewPaperButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                viewPaperButtonMouseExited(evt);
            }
        });
        jPanel2.add(viewPaperButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 440, 130, 40));

        add(jPanel2);
        jPanel2.setBounds(0, 0, 990, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void goTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goTextActionPerformed
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            String qNumber = goText.getText();

            clear();
            if (Integer.parseInt(qNumber) < 1) {

            } else {
                qNumText.setText(qNumber);
                try {
                    QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                    Question q = qc.SearchQuestion("Q", qNumber, path, fileName);
                    if (q == null) {
                        matchLabel.setText("Not Found");
                    } else {
                        matchLabel.setText("Found");
                        ////////////set data//////////////
                        i = Integer.parseInt(q.getqNumber());
                        pIdText.setText(q.getPaperId());
                        qNumText.setText(q.getqNumber());
                        mainQText.setText(q.getMainQ());
                        aText.setText(q.getQ1());
                        bText.setText(q.getQ2());
                        cText.setText(q.getQ3());
                        dText.setText(q.getQ4());
                        ///////////////setb Ans///////////////////////
                        String a = q.getQa();
                        String b = q.getQb();
                        String c = q.getQc();
                        String d = q.getQd();

                        if (a.equals("A")) {
                            aa.setSelected(true);
                        } else {

                        }

                        if (b.equals("B")) {
                            bb.setSelected(true);
                        } else {

                        }
                        if (c.equals("C")) {
                            cc.setSelected(true);
                        } else {

                        }
                        if (d.equals("D")) {
                            dd.setSelected(true);
                        } else {

                        }
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                } catch (IOException ex) {
                    Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_goTextActionPerformed

    private void bTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bTextActionPerformed

    private void mainQTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainQTextKeyPressed
        matchLabel.setText(null);        // TODO add your handling code here:
    }//GEN-LAST:event_mainQTextKeyPressed

    private void aaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aaActionPerformed

    private void publishButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_publishButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select Paper", "Warning!!", 2);
        } else {
            if (publishLabel.getText().equals("paper has been Published")) {

            } else {

                String paperId = pIdText.getText();

                try {
                    QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                    boolean isTrue = qc.publishPaper(paperId, path, fileName);
                    if (isTrue) {
                        publishLabel.setText("paper has been Published");
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                    Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_publishButtonMouseClicked

    private void unpublishButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unpublishButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select Paper", "Warning!!", 2);
        } else {
            String paperId = pIdText.getText();

            try {
                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                boolean isTrue = qc.unPublishPaper(paperId, path, fileName);
                if (isTrue) {
                    publishLabel.setText("paper has been Unpublished");
                }
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_unpublishButtonMouseClicked

    private void batchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_batchComboItemStateChanged
        getpapersName();           // TODO add your handling code here:
    }//GEN-LAST:event_batchComboItemStateChanged

    private void batchComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboMouseClicked
        getpapersName();           // TODO add your handling code here:
    }//GEN-LAST:event_batchComboMouseClicked

    private void cemesterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cemesterComboItemStateChanged
        getpapersName();        // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboItemStateChanged

    private void cemesterComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cemesterComboMouseClicked
        getpapersName();           // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboMouseClicked

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged

        getpapersName();                 // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void subjectComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectComboMouseClicked

        getpapersName();       // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboMouseClicked

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        itemStateChanged();
    }//GEN-LAST:event_typeComboItemStateChanged

    private void typeComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboMouseClicked

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed
        try {

            nameText.setEditable(true);
            matchLabel.setText(null);
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            //qc.releasePaper(pIdText.getText());
            type = typeCombo.getSelectedItem().toString();
            if (type.equals("Create New")) {

                nameText.setVisible(true);
                nameText.setText(null);
                okButton.setVisible(true);
                nameLabel.setVisible(true);
            } else {

                nameText.setVisible(false);
                okButton.setVisible(false);
                nameLabel.setVisible(false);
            }
        } catch (NullPointerException ex) {
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }   // TODO add your handling code here:
    }//GEN-LAST:event_typeComboActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed

    }//GEN-LAST:event_okButtonActionPerformed

    private void goTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_goTextFocusGained
        goText.setText(null);
    }//GEN-LAST:event_goTextFocusGained

    private void goTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_goTextFocusLost
        goText.setText("Search Question ");  // TODO add your handling code here:
    }//GEN-LAST:event_goTextFocusLost

    private void typeComboMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseExited

    }//GEN-LAST:event_typeComboMouseExited

    private void typeComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMousePressed

    }//GEN-LAST:event_typeComboMousePressed

    private void typeComboMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboMouseReleased

    private void okButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonMouseClicked

        String text = nameText.getText();
        if (nameText.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Enter Paper Name", "Warning", 2);
        } else {
            try {
                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                boolean existsFileName = qc.isExistsFileName(nameText.getText());
                if (existsFileName) {
                    nameText.setText(null);

                    JOptionPane.showMessageDialog(null, "This Name Already Exists", "Warning", 2);
                } else {
                    i = 1;
                    pIdText.setText(null);
                    qNumText.setText(Integer.toString(i));
                    fileName = nameText.getText() + ".txt";

                    code = qc.getNewPaperId();
                    relese.code = code;
                    pIdText.setText(code);
                    if (this.code != code) {
                        qc.releasePaper(this.code);
                    } else {
                        this.code = code;
                    }

                    qc.reservePaper(code);

                    this.paperId = pIdText.getText();
                    okButton.setVisible(false);
                    pIdText.setEditable(false);
                    nameText.setEditable(false);

                }

            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_okButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            try {
                ExamController ec = ServerConnecter.getServerConnecter().getExamController();
                StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
                boolean IsAvailablePracticeExam = sc.IsAvailablePracticeExam(pIdText.getText());
                if (IsAvailablePracticeExam) {
                    JOptionPane.showMessageDialog(null, "Can't Update Exam at this moment", "Warning", 2);
                } else {
                    boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
                    if (IsAvailableFinalExam) {
                        JOptionPane.showMessageDialog(null, "Can't Update Exam at this moment", "Warning", 2);
                    } else {
                        boolean IsPaperIdAvailable = ec.IsPaperIdAvailable(pIdText.getText());
                        if (IsPaperIdAvailable) {
                            JOptionPane.showMessageDialog(null, "Delete paper from Exam Schedule", "Warning", 2);
                        } else {
                            //////////////////////answers//////////////////////////////
                            boolean s1 = aa.isSelected();
                            if (s1) {
                                qA = "A";
                            } else {
                                qA = "*";
                            }
                            boolean s2 = bb.isSelected();
                            if (s2) {
                                qB = "B";
                            } else {
                                qB = "*";
                            }
                            boolean s3 = cc.isSelected();
                            if (s3) {
                                qC = "C";
                            } else {
                                qC = "*";
                            }
                            boolean s4 = dd.isSelected();
                            if (s4) {
                                qD = "D";
                            } else {
                                qD = "*";
                            }
/////////////////model data//////////////////////////////////
                            String paperId = pIdText.getText();
                            String qNumber = qNumText.getText();
                            String mainQ = mainQText.getText();
                            String q1 = aText.getText();
                            String q2 = bText.getText();
                            String q3 = cText.getText();
                            String q4 = dText.getText();

                            Question q = new Question(qNumber, paperId, mainQ, q1, q2, q3, q4, qA, qB, qC, qD, path, fileName);
                            ///////////////////////////////////////////
                            try {
                                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                                boolean isTrue = qc.updateQuestion(q);
                                System.out.println("b: "+isTrue);
                                if (isTrue) {
                                    matchLabel.setText("Update Successfully ");

                                } else {
                                    matchLabel.setText("Update Fail");
                                }
                            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException | ClassNotFoundException ex) {
                                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    }
                }
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_updateButtonMouseClicked

    private void updateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseEntered
        updateButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_updateButtonMouseEntered

    private void updateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseExited
        updateButton.setForeground(Color.white);
    }//GEN-LAST:event_updateButtonMouseExited

    private void backButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            if (i == 1) {

            } else {
                --i;
                qNumText.setText(Integer.toString(i));

                goTo(qNumText.getText());
            }
        }
    }//GEN-LAST:event_backButtonMouseClicked

    private void backButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseEntered
        backButton.setForeground(Color.black);
    }//GEN-LAST:event_backButtonMouseEntered

    private void backButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backButtonMouseExited
        backButton.setForeground(Color.WHITE);          // TODO add your handling code here:
    }//GEN-LAST:event_backButtonMouseExited

    private void nextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            String q = mainQText.getText();
            String q1 = aText.getText();
            String q2 = bText.getText();
            String q3 = cText.getText();
            String q4 = dText.getText();
            if (q.isEmpty() == q1.isEmpty() == q2.isEmpty() == q3.isEmpty() == q4.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Enter Question and Options", "Warning!!", 2);
            } else {

                if (stopIncrement) {
                    i++;
                    qNumText.setText(Integer.toString(i));
                } else {

                }
            }

            ///////////////////////////////////////////////////////////////
            goTo(qNumText.getText());
        }
    }//GEN-LAST:event_nextButtonMouseClicked

    private void nextButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseEntered
        nextButton.setForeground(Color.black);        // TODO add your handling code here:
    }//GEN-LAST:event_nextButtonMouseEntered

    private void nextButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMouseExited
        nextButton.setForeground(Color.white);  // TODO add your handling code here:
    }//GEN-LAST:event_nextButtonMouseExited

    private void clearButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButton1MouseClicked
        clear();
    }//GEN-LAST:event_clearButton1MouseClicked

    private void clearButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButton1MouseEntered
        clearButton1.setForeground(Color.black);
    }//GEN-LAST:event_clearButton1MouseEntered

    private void clearButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButton1MouseExited
        clearButton1.setForeground(Color.white);
    }//GEN-LAST:event_clearButton1MouseExited

    private void getLastQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getLastQButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            try {
                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                String numberOfQuestion = qc.getNumberOfQuestion(path, fileName);
                this.i = Integer.parseInt(numberOfQuestion);
                goTo(numberOfQuestion);
            } catch (NotBoundException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_getLastQButtonMouseClicked

    private void getLastQButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getLastQButtonMouseEntered
        getLastQButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_getLastQButtonMouseEntered

    private void getLastQButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getLastQButtonMouseExited
        getLastQButton.setForeground(Color.white);
    }//GEN-LAST:event_getLastQButtonMouseExited

    private void getSelectedQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getSelectedQButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            String pth = null;
            String tpe = null;
            if (type == "Create New") {
                String name = nameText.getText();
                if (name.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Enter Paper Name", "Warning", 1);
                } else {

                    try {
                        String batch = batchCombo.getSelectedItem().toString();
                        String cemester = cemesterCombo.getSelectedItem().toString();
                        String subject = subjectCombo.getSelectedItem().toString();

                        pth = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;

                        String fileName = nameText.getText() + ".txt";

                    } catch (NullPointerException ex) {
                    }

                    AddManualQuestion addManualQuestion = new AddManualQuestion(pth, fileName, this);
                    addManualQuestion.setVisible(true);
                }
            } else if (type == "None") {

            } else {

                try {
                    String batch = batchCombo.getSelectedItem().toString();
                    String cemester = cemesterCombo.getSelectedItem().toString();
                    String subject = subjectCombo.getSelectedItem().toString();

                    pth = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;

                    tpe = typeCombo.getSelectedItem().toString();

                    String fileName = type + ".txt";

                } catch (NullPointerException ex) {
                }

                AddManualQuestion addManualQuestion = new AddManualQuestion(pth, fileName, this);
                addManualQuestion.setVisible(true);
            }
        }
    }//GEN-LAST:event_getSelectedQButtonMouseClicked

    private void getSelectedQButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getSelectedQButtonMouseEntered
        getSelectedQButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_getSelectedQButtonMouseEntered

    private void getSelectedQButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getSelectedQButtonMouseExited
        getSelectedQButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_getSelectedQButtonMouseExited

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            StudentController sc = ServerConnecter.getServerConnecter().getStudentController();

            if (pIdText.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
            } else {
                if (mainQText.getText().isEmpty() || mainQText.getText() == null || aText.getText().isEmpty() || aText.getText() == null || bText.getText().isEmpty() || bText.getText() == null || cText.getText().isEmpty() || cText.getText() == null || dText.getText().isEmpty() || dText.getText() == null) {
                    JOptionPane.showMessageDialog(null, "Enter Question and Options", "Warning!!", 2);
                } else {

                    boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
                    if (IsAvailableFinalExam) {
                        JOptionPane.showMessageDialog(null, "Can't Add Question at this moment", "Warning", 2);
                    } else {
                        boolean IsAvailablePracticeExam = sc.IsAvailablePracticeExam(pIdText.getText());
                        if (IsAvailablePracticeExam) {
                            JOptionPane.showMessageDialog(null, "Can't Add Question at this moment", "Warning", 2);
                        } else {
                            boolean IsPaperIdAvailable = ec.IsPaperIdAvailable(pIdText.getText());
                            if (IsPaperIdAvailable) {
                                JOptionPane.showMessageDialog(null, "Delete paper from Exam Schedule", "Warning", 2);
                            } else {//
                                if (type == "Create New") {
                                    String name = nameText.getText();
                                    if (name.isEmpty()) {
                                        JOptionPane.showMessageDialog(null, "Enter Paper Name", "Warning", 1);
                                    } else {

                                        String q = mainQText.getText();
                                        String q1 = aText.getText();
                                        String q2 = bText.getText();
                                        String q3 = cText.getText();
                                        String q4 = dText.getText();
                                        if (q.isEmpty() == q1.isEmpty() == q2.isEmpty() == q3.isEmpty() == q4.isEmpty()) {
                                            JOptionPane.showMessageDialog(null, "Enter Question and Options", "Warning!!", 2);
                                        } else {
                                            saveMethod();
                                        }

                                    }
                                } else if (type == "None") {

                                } else {
                                    saveMethod();
                                }
                            }
                        }
                    }

                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveButtonMouseClicked

    private void saveButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseEntered
        saveButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_saveButtonMouseEntered

    private void saveButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseExited
        saveButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonMouseExited

    private void deletePaperButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePaperButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            int res1 = JOptionPane.showConfirmDialog(null, "Do you want to Delete This Paper", "Confirm", JOptionPane.YES_NO_OPTION);
            if (res1 == JOptionPane.YES_OPTION) {
                try {

                    ExamController ec = ServerConnecter.getServerConnecter().getExamController();
                    QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                    StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
                    boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
                    if (IsAvailableFinalExam) {
                        JOptionPane.showMessageDialog(null, "Can't delete Exam at this moment", "Warning", 2);
                    } else {
                        boolean IsAvailablePracticeExam = sc.IsAvailablePracticeExam(pIdText.getText());
                        if (IsAvailablePracticeExam) {
                            JOptionPane.showMessageDialog(null, "Can't delete Exam at this moment", "Warning", 2);
                        } else {
                            boolean IsPaperIdAvailable = ec.IsPaperIdAvailable(pIdText.getText());
                            if (IsPaperIdAvailable) {
                                JOptionPane.showMessageDialog(null, "Delete paper from Exam Schedule", "Warning", 2);
                            } else {
                                boolean deletePaperDetail = qc.deletePaperDetail(pIdText.getText());
                                if (deletePaperDetail) {
                                    boolean deletepublishUnpublish = qc.deletepublishUnpublish(pIdText.getText());
                                    if (deletepublishUnpublish) {
//                                    boolean deletePaperFile = qc.deletePaperFile(path);
//                                    if (deletePaperFile == false) {
                                        typeCombo.setSelectedIndex(0);
                                        JOptionPane.showMessageDialog(null, "Delete Successfully!");
                                        typeCombo.setSelectedIndex(0);
//                                    } else {
//                                        JOptionPane.showMessageDialog(null, "Delete Fail !!!");
//                                    }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Delete Fail1 !!!");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Delete Fail !!!2");
                                }
                            }
                        }
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                } catch (IOException ex) {
                }
                if (res1 == JOptionPane.NO_OPTION) {
                }
            }
        }

    }//GEN-LAST:event_deletePaperButtonMouseClicked

    private void deletePaperButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePaperButtonMouseEntered
        deletePaperButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_deletePaperButtonMouseEntered

    private void deletePaperButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePaperButtonMouseExited
        deletePaperButton.setForeground(Color.white);
    }//GEN-LAST:event_deletePaperButtonMouseExited

    private void deleteQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteQButtonMouseClicked

        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
            String numberOfQuestion = qc.getNumberOfQuestion(path, fileName);
            this.i = Integer.parseInt(numberOfQuestion);

            if (i > 1) {
                if (pIdText.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
                } else {
                    boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
                    if (IsAvailableFinalExam) {
                        JOptionPane.showMessageDialog(null, "Can't delete Question at this moment", "Warning", 2);
                    } else {
                        boolean IsAvailablePracticeExam = sc.IsAvailablePracticeExam(pIdText.getText());
                        if (IsAvailablePracticeExam) {
                            JOptionPane.showMessageDialog(null, "Can't delete Question at this moment", "Warning", 2);
                        } else {
                            boolean IsPaperIdAvailable = ec.IsPaperIdAvailable(pIdText.getText());
                            if (IsPaperIdAvailable) {
                                JOptionPane.showMessageDialog(null, "Delete paper from Exam Schedule", "Warning", 2);
                            } else {
                                Question q = qc.SearchQuestion("Q", qNumText.getText(), path, fileName);

                                if (q == null) {
                                    matchLabel.setText("Not Found");

                                } else {
                                    matchLabel.setText("Found");
                                    int res1 = JOptionPane.showConfirmDialog(null, "Do you want to Delete This Question", "Confirm", JOptionPane.YES_NO_OPTION);
                                    if (res1 == JOptionPane.YES_OPTION) {

                                        boolean deleteQuestion = qc.deleteQuestion(path + "/" + fileName, qNumText.getText());

                                        if (deleteQuestion) {
                                            qc.ResetQuestionNumbers(path + "/" + fileName);
                                            String numberOfQuestions = qc.getNumberOfQuestion(path, fileName);
                                            this.i = Integer.parseInt(numberOfQuestions);
                                            goTo(numberOfQuestions);

                                            JOptionPane.showMessageDialog(null, "Delete Successfully");
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Delete Fail");
                                        }

                                    }
                                    if (res1 == JOptionPane.NO_OPTION) {
                                    }

                                }
                            }

                        }
                    }

                }
            } else {
                JOptionPane.showMessageDialog(null, "Update this Question");
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteQButtonMouseClicked

    private void deleteQButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteQButtonMouseEntered
        deleteQButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_deleteQButtonMouseEntered

    private void deleteQButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteQButtonMouseExited
        deleteQButton.setForeground(Color.white);
    }//GEN-LAST:event_deleteQButtonMouseExited

    private void viewPaperButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPaperButtonMouseClicked
        if (pIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
        } else {
            try {
                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                System.out.println("view Path: " + path);
                System.out.println("view FileName: " + fileName);
                ArrayList<Question> allQuestion = qc.getAllQuestion(path + "/" + fileName);

                ViewPaper view = new ViewPaper(fileName, allQuestion);
                view.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NotBoundException ex) {
                Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_viewPaperButtonMouseClicked

    private void viewPaperButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPaperButtonMouseEntered
        viewPaperButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_viewPaperButtonMouseEntered

    private void viewPaperButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewPaperButtonMouseExited
        viewPaperButton.setForeground(Color.white);
    }//GEN-LAST:event_viewPaperButtonMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aText;
    private javax.swing.JRadioButton aa;
    private javax.swing.JTextField bText;
    private javax.swing.JLabel backButton;
    private javax.swing.JComboBox batchCombo;
    private javax.swing.JRadioButton bb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cText;
    private javax.swing.JRadioButton cc;
    private javax.swing.JComboBox cemesterCombo;
    private javax.swing.JLabel clearButton1;
    private javax.swing.JTextField dText;
    private javax.swing.JRadioButton dd;
    private javax.swing.JLabel deletePaperButton;
    private javax.swing.JLabel deleteQButton;
    private javax.swing.JLabel getLastQButton;
    private javax.swing.JLabel getSelectedQButton;
    private javax.swing.JTextField goText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mainQText;
    private javax.swing.JLabel matchLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel nextButton;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField pIdText;
    private javax.swing.JLabel publishButton;
    private javax.swing.JLabel publishLabel;
    private javax.swing.JTextField qNumText;
    private javax.swing.JLabel saveButton;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JComboBox typeCombo;
    private javax.swing.JLabel unpublishButton;
    private javax.swing.JLabel updateButton;
    private javax.swing.JLabel viewPaperButton;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    public void clear() {
        mainQText.setText(null);
        aText.setText(null);
        bText.setText(null);
        cText.setText(null);
        dText.setText(null);
        aa.setSelected(false);
        bb.setSelected(false);
        cc.setSelected(false);
        dd.setSelected(false);
    }

    /**
     *
     * @param qNumber
     */
    public void goTo(String qNumber) {

        clear();
        try {
            QuestionController questionController = ServerConnecter.getServerConnecter().getQuestionController();
            Question q = questionController.SearchQuestion("Q", qNumber, path, fileName);

            if (q == null) {
                matchLabel.setText("Not Found");
                System.out.println("Not Found");
                stopIncrement = false;
            } else {
                matchLabel.setText("Found");
                stopIncrement = true;

                String code = q.getPaperId();
                System.out.println("Code: " + code);
                relese.code = code;

                if (this.code != code) {
                    questionController.releasePaper(this.code);
                } else {
                    this.code = code;
                }
                if (code == null || code.isEmpty()) {

                } else {

                    if (questionController.reservePaper(code)) {
                        pIdText.setText(q.getPaperId());
                        ////////////set data//////////////

                        paperId = q.getPaperId();
                        qNumText.setText(q.getqNumber());
                        mainQText.setText(q.getMainQ().replace("අ", "\n"));
                        aText.setText(q.getQ1());
                        bText.setText(q.getQ2());
                        cText.setText(q.getQ3());
                        dText.setText(q.getQ4());
                        ///////////////setb Ans///////////////////////
                        String a = q.getQa();
                        String b = q.getQb();
                        String c = q.getQc();
                        String d = q.getQd();

                        if (a.equals("A")) {
                            aa.setSelected(true);
                        } else {

                        }

                        if (b.equals("B")) {
                            bb.setSelected(true);
                        } else {

                        }
                        if (c.equals("C")) {
                            cc.setSelected(true);
                        } else {

                        }
                        if (d.equals("D")) {
                            dd.setSelected(true);
                        } else {

                        }
                    } else {
                        matchLabel.setText(pIdText.getText() + " is reserved");
                        System.out.println("reservedd");
                    }
                }
            }
        } catch (NotBoundException | MalformedURLException | RemoteException | NullPointerException ex) {
        } catch (IOException ex) {
        }

    }

    /**
     *
     */
    public void getpapersName() {
        try {
            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            String path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
        } catch (NullPointerException ex) {
        }
        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            ArrayList<String> papersNameList = qc.getPapersName(path);
            if (papersNameList == null) {
                typeCombo.removeAllItems();
                typeCombo.addItem("Create New");
            } else {
                typeCombo.removeAllItems();
                typeCombo.addItem("None");
                typeCombo.addItem("Create New");
                for (String s : papersNameList) {
                    String ss = s.replace(".txt", "");
                    typeCombo.addItem(ss);
                }

            }

        } catch (MalformedURLException | RemoteException | NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     */
    public void fillCombo() {

        try {
            BatchController bc = ServerConnecter.getServerConnecter().getBatchController();
            SemesterController cc = ServerConnecter.getServerConnecter().getCemesterController();
            SubjectController sc = ServerConnecter.getServerConnecter().getSubjectController();

            ////batch combo
            ArrayList<Batch> allBatch = bc.getAllBatch();
            batchCombo.removeAll();
            for (Batch b : allBatch) {
                batchCombo.addItem(b.getBatchName());
            }

            ////Cemster Combo
            ArrayList<Cemester> allCemester = cc.getAllCemester();
            cemesterCombo.removeAll();
            for (Cemester c : allCemester) {
                cemesterCombo.addItem(c.getCemesterName());
            }

            /////Subject Combo
            ArrayList<Subject> allSubject = sc.getAllSubject();
            subjectCombo.removeAll();
            for (Subject s : allSubject) {
                subjectCombo.addItem(s.getSubjectName());
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     */
    public void saveMethod() {
        String q = mainQText.getText();
        String q1 = aText.getText();
        String q2 = bText.getText();
        String q3 = cText.getText();
        String q4 = dText.getText();
        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            boolean searchQNumberIsAvailable = qc.searchQNumberIsAvailable(qNumText.getText(), path, fileName);

            if (searchQNumberIsAvailable) {
                JOptionPane.showMessageDialog(null, "This Question Already Exists", "Warning", 1);

                clear();
                //////////////////////////Increase qNumber /////////////////////////////////////////
                ++i;
                qNumText.setText(Integer.toString(i));
            } else {

                //////////////////////answers//////////////////////////////
                boolean s1 = aa.isSelected();
                if (s1) {
                    qA = "A";
                } else {
                    qA = "*";
                }
                boolean s2 = bb.isSelected();
                if (s2) {
                    qB = "B";
                } else {
                    qB = "*";
                }
                boolean s3 = cc.isSelected();
                if (s3) {
                    qC = "C";
                } else {
                    qC = "*";
                }
                boolean s4 = dd.isSelected();
                if (s4) {
                    qD = "D";
                } else {
                    qD = "*";
                }

                //////////////////model data//////////////////////////////////
                String paperId = pIdText.getText();
                String qNumber = qNumText.getText();
                String mainQ = mainQText.getText().replace("\n", "අ");

                Question qq = new Question(qNumber, paperId, mainQ, q1, q2, q3, q4, qA, qB, qC, qD, path, fileName);
                ///////////////////////////////////////////

                boolean isTrue = qc.addQuestion(qq);

                if (isTrue) {
                    clear();
                    matchLabel.setText("Added Successfully ");
                } else {
                    matchLabel.setText("Added Fail");
                }

                //////////////////////////Increase qNumber /////////////////////////////////////////
                ++i;
                qNumText.setText(Integer.toString(i));
            }

        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     * @param qList
     * @param paths
     * @param fileNames
     */
    public void addSelectedQuestion(ArrayList<Question> qList, String paths, String fileNames) {

        for (Question qq : qList) {
            saveMethod(qq, paths, fileNames);
        }

        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            String qNum = qc.getNumberOfQuestion(paths, fileNames);
            this.path = paths;
            this.fileName = fileNames;
            this.i = Integer.parseInt(qNum);
            qNumText.setText(qNum);
            System.out.println("Qnum :" + qNum);

            clear();

            Question q = qc.SearchQuestion("Q", qNum, path, fileName);
            System.out.println("1");
            if (q == null) {
                matchLabel.setText("Not Found");
                System.out.println("2");
                stopIncrement = false;
            } else {
                matchLabel.setText("Found");
                stopIncrement = true;
                System.out.println("3");
                ////////////set data//////////////
                pIdText.setText(q.getPaperId());
                paperId = q.getPaperId();
                qNumText.setText(q.getqNumber());
                mainQText.setText(q.getMainQ().replace("අ", "\n"));
                aText.setText(q.getQ1());
                bText.setText(q.getQ2());
                cText.setText(q.getQ3());
                dText.setText(q.getQ4());
                ///////////////setb Ans///////////////////////
                String a = q.getQa();
                String b = q.getQb();
                String c = q.getQc();
                String d = q.getQd();

                if (a.equals("A")) {
                    aa.setSelected(true);
                } else {

                }

                if (b.equals("B")) {
                    bb.setSelected(true);
                } else {

                }
                if (c.equals("C")) {
                    cc.setSelected(true);
                } else {

                }
                if (d.equals("D")) {
                    dd.setSelected(true);
                } else {

                }

            }
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(null, "Added Successfully ");
    }

    /**
     *
     * @param qq
     * @param paths
     * @param fileNames
     */
    public void saveMethod(Question qq, String paths, String fileNames) {
        int ii;
        try {

            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            ii = Integer.parseInt(qc.getNumberOfQuestion(paths, fileNames));
            ++ii;
            Question q = new Question(Integer.toString(ii), paperId, qq.getMainQ(), qq.getQ1(), qq.getQ2(), qq.getQ3(), qq.getQ4(), qq.getQa(), qq.getQb(), qq.getQc(), qq.getQd(), paths, fileNames);
            qc.addQuestion(q);

        } catch (NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     */
    public void itemStateChanged() {
        try {
            nameText.setEditable(true);
            matchLabel.setText(null);
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            qc.releasePaper(pIdText.getText());
            i = 1;
            qNumText.setText(null);
            pIdText.setText(null);
            try {
                String batch = batchCombo.getSelectedItem().toString();
                String cemester = cemesterCombo.getSelectedItem().toString();
                String subject = subjectCombo.getSelectedItem().toString();
                String type = null;

                type = typeCombo.getSelectedItem().toString();

                path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
                fileName = type + ".txt";
            } catch (NullPointerException ex) {
            }

            //goTo("1");
            ////////get Last Question
            String numberOfQuestion = qc.getNumberOfQuestion(path, fileName);
            this.i = Integer.parseInt(numberOfQuestion);
            goTo(numberOfQuestion);

            ////////////////check Publish and Unpublish////////////////////
            boolean isTrue = qc.checkPublshORunPublished(pIdText.getText());
            if (isTrue) {
                publishLabel.setText("paper has been Published");
            } else {
                publishLabel.setText("paper has been Unpublished");
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
