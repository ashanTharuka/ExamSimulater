/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.examsuccess.view.manage;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.java.swing.plaf.motif.MotifBorders;
import edu.ijse.gdse37.examsuccess.model.Batch;
import edu.ijse.gdse37.examsuccess.model.Cemester;
import edu.ijse.gdse37.examsuccess.model.Question;
import edu.ijse.gdse37.examsuccess.model.Subject;
import edu.ijse.gdse37.examsuccess.connecter.ServerConnecter;
import edu.ijse.gdse37.examsuccess.controller.BatchController;
import edu.ijse.gdse37.examsuccess.controller.SemesterController;
import edu.ijse.gdse37.examsuccess.controller.QuestionController;
import edu.ijse.gdse37.examsuccess.controller.SubjectController;
import edu.ijse.gdse37.examsuccess.view.other.Validation;
import edu.ijse.gdse37.examsuccess.view.student.Add_Student_Panal;
import edu.ijse.gdse37.examsuccess.view.student.Student;
import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ashan Tharuka
 */
public class PracticeExamSchedule extends javax.swing.JPanel {

    private String path;
    private String pId;
    private String studentId;

    private boolean o2IsTrue;
    private boolean o1IsTrue;
    private boolean timeLimit1;
    private boolean timeLimit2;
    private Student student;
    private String time;

    /**
     * Creates new form Practice_Exam_Panel_01
     *
     * @param id
     * @param student
     */
    public PracticeExamSchedule(String id, Student student) {
        initComponents();
        setSize(990, 600);
        fillCombo();
        fillDataToTable();
        this.studentId = id;

        downloadButton.setVisible(false);
        time = null;
        this.student = student;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        myPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        op1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        o1 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        o2 = new javax.swing.JRadioButton();
        op2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        op3 = new javax.swing.JTextField();
        batchCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cemesterCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        sdfsdf = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        qCountLabel = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        paperId = new javax.swing.JLabel();
        paperIdText = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        paperNameText = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        time2 = new javax.swing.JRadioButton();
        timeLimitHourCombo = new javax.swing.JComboBox();
        timeLimitMiniteCombo = new javax.swing.JComboBox();
        time1 = new javax.swing.JRadioButton();
        requestButton = new javax.swing.JLabel();
        downloadButton = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1105, 700));
        setPreferredSize(new java.awt.Dimension(1105, 700));
        setLayout(null);

        myPanel.setBackground(new java.awt.Color(255, 255, 255));
        myPanel.setMinimumSize(new java.awt.Dimension(990, 600));
        myPanel.setPreferredSize(new java.awt.Dimension(990, 600));
        myPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Question Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel2.setLayout(null);

        op1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op1ActionPerformed(evt);
            }
        });
        op1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op1KeyReleased(evt);
            }
        });
        jPanel2.add(op1);
        op1.setBounds(90, 30, 50, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Take");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(50, 30, 40, 30);

        o1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(o1);
        o1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o1ActionPerformed(evt);
            }
        });
        jPanel2.add(o1);
        o1.setBounds(10, 30, 30, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Questions from Paper");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(160, 30, 170, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Take Question Range from");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(50, 90, 170, 30);

        o2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(o2);
        o2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o2ActionPerformed(evt);
            }
        });
        jPanel2.add(o2);
        o2.setBounds(10, 90, 30, 30);

        op2.setEditable(false);
        op2.setBackground(new java.awt.Color(255, 255, 255));
        op2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op2ActionPerformed(evt);
            }
        });
        op2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op2KeyReleased(evt);
            }
        });
        jPanel2.add(op2);
        op2.setBounds(230, 90, 50, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("To");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(290, 90, 30, 30);

        op3.setEditable(false);
        op3.setBackground(new java.awt.Color(255, 255, 255));
        op3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op3ActionPerformed(evt);
            }
        });
        op3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op3KeyReleased(evt);
            }
        });
        jPanel2.add(op3);
        op3.setBounds(320, 90, 50, 30);

        myPanel.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 170, 430, 150));
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        batchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                batchComboItemStateChanged(evt);
            }
        });
        batchCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchComboMouseClicked(evt);
            }
        });
        myPanel.add(batchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 140, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Batch");
        myPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 140, 30));

        cemesterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cemesterComboItemStateChanged(evt);
            }
        });
        cemesterCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cemesterComboMouseClicked(evt);
            }
        });
        myPanel.add(cemesterCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 140, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cemester");
        myPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 140, 30));

        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        subjectCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectComboMouseClicked(evt);
            }
        });
        myPanel.add(subjectCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 130, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Subject");
        myPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 130, 30));

        sdfsdf.setBackground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Paper Id", "Paper Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        sdfsdf.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        myPanel.add(sdfsdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 450, 470));

        qCountLabel.setEditable(false);
        qCountLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qCountLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qCountLabelActionPerformed(evt);
            }
        });
        myPanel.add(qCountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, 70, 40));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Quiz Count");
        myPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 70, 50));

        paperId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        paperId.setText("paper Id");
        myPanel.add(paperId, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 70, 60, 50));

        paperIdText.setEditable(false);
        myPanel.add(paperIdText, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 60, 40));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Paper Name");
        myPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 70, 110, 50));

        paperNameText.setEditable(false);
        paperNameText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        paperNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paperNameTextActionPerformed(evt);
            }
        });
        myPanel.add(paperNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 110, 110, 40));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Assign Time Limit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel3.setLayout(null);

        time2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(time2);
        time2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time2ActionPerformed(evt);
            }
        });
        jPanel3.add(time2);
        time2.setBounds(20, 90, 30, 21);

        timeLimitHourCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "01", "02", "03", "04" }));
        timeLimitHourCombo.setToolTipText("");
        jPanel3.add(timeLimitHourCombo);
        timeLimitHourCombo.setBounds(60, 90, 60, 30);

        timeLimitMiniteCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "15", "30", "45" }));
        jPanel3.add(timeLimitMiniteCombo);
        timeLimitMiniteCombo.setBounds(130, 90, 60, 30);

        time1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(time1);
        time1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        time1.setText("      No Time Limit");
        time1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time1ActionPerformed(evt);
            }
        });
        jPanel3.add(time1);
        time1.setBounds(20, 30, 140, 25);

        myPanel.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 340, 430, 150));

        requestButton.setBackground(new java.awt.Color(171, 227, 247));
        requestButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        requestButton.setForeground(new java.awt.Color(255, 255, 255));
        requestButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        requestButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/requestButton.png"))); // NOI18N
        requestButton.setText("<html>Request <br>");
        requestButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        requestButton.setMinimumSize(new java.awt.Dimension(110, 50));
        requestButton.setPreferredSize(new java.awt.Dimension(110, 50));
        requestButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                requestButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                requestButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                requestButtonMouseExited(evt);
            }
        });
        myPanel.add(requestButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 500, 150, 60));

        downloadButton.setBackground(new java.awt.Color(255, 255, 255));
        downloadButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        downloadButton.setForeground(new java.awt.Color(255, 255, 255));
        downloadButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        downloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/downloadButton.png"))); // NOI18N
        downloadButton.setText("<html> <br>");
        downloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downloadButton.setMinimumSize(new java.awt.Dimension(110, 50));
        downloadButton.setPreferredSize(new java.awt.Dimension(110, 50));
        downloadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                downloadButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                downloadButtonMouseExited(evt);
            }
        });
        myPanel.add(downloadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 110, 140, 40));

        add(myPanel);
        myPanel.setBounds(0, 0, 990, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void batchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_batchComboItemStateChanged
        fillDataToTable();        // TODO add your handling code here:
    }//GEN-LAST:event_batchComboItemStateChanged

    private void batchComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_batchComboMouseClicked

    private void cemesterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cemesterComboItemStateChanged
        fillDataToTable();        // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboItemStateChanged

    private void cemesterComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cemesterComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboMouseClicked

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged
        fillDataToTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void subjectComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboMouseClicked

    private void op1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op1ActionPerformed

    private void op1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op1KeyReleased
        Validation.numberOnly(op1);
        try {
            int qq = Integer.parseInt(op1.getText());
            int qCount = Integer.parseInt(qCountLabel.getText());
            if (qq > qCount || qq <= 0) {
                op1.setText(null);
            }
        } catch (NumberFormatException ex) {
        }

    }//GEN-LAST:event_op1KeyReleased

    private void o2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o2ActionPerformed
        o2IsTrue = o2.isSelected();
        if (o2IsTrue) {
            o1IsTrue = false;
            op2.setEditable(true);
            op3.setEditable(false);

            op1.setText(null);
            op1.setEditable(false);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_o2ActionPerformed

    private void op2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op2ActionPerformed

    private void op2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op2KeyReleased
        Validation.numberOnly(op2);
        try {
            int qq = Integer.parseInt(op2.getText());
            int qCount = Integer.parseInt(qCountLabel.getText());
            if (qq > qCount || qq <= 0) {
                op2.setText(null);
            }

            if (Integer.toString(qq).isEmpty()) {
                op3.setEditable(false);
            } else {
                op3.setEditable(true);
            }
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_op2KeyReleased

    private void op3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op3ActionPerformed

    private void op3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op3KeyReleased
        Validation.numberOnly(op3);
        // TODO add your handling code here:
    }//GEN-LAST:event_op3KeyReleased

    private void qCountLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qCountLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qCountLabelActionPerformed

    private void paperNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paperNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paperNameTextActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        try {
            String fileName = table.getValueAt(table.getSelectedRow(), 1).toString();
            String id = table.getValueAt(table.getSelectedRow(), 0).toString();
            paperNameText.setText(fileName);
            pId = id;
            paperIdText.setText(id);

            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            String numOfQuestion = qc.getNumberOfQuestion(path, fileName + ".txt");
            qCountLabel.setText(numOfQuestion);
            downloadButton.setVisible(true);
        } catch (NotBoundException | ArrayIndexOutOfBoundsException | RemoteException ex) {

        } catch (MalformedURLException ex) {
            Logger.getLogger(PracticeExamSchedule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PracticeExamSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_tableMouseClicked

    private void o1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o1ActionPerformed
        o1IsTrue = o1.isSelected();
        if (o1IsTrue) {
            o2IsTrue = false;
            op1.setEditable(true);
            op2.setText(null);
            op3.setText(null);
            op2.setEditable(false);
            op3.setEditable(false);

        }
    }//GEN-LAST:event_o1ActionPerformed

    private void time1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time1ActionPerformed
        timeLimit1 = time1.isSelected();
        if (timeLimit1) {
            timeLimit2 = false;
            timeLimitHourCombo.setSelectedIndex(0);
            timeLimitMiniteCombo.setSelectedIndex(0);
        }
    }//GEN-LAST:event_time1ActionPerformed

    private void time2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time2ActionPerformed
        timeLimit2 = time2.isSelected();
        if (timeLimit2) {
            timeLimit1 = false;
            timeLimitHourCombo.setSelectedIndex(0);
            timeLimitMiniteCombo.setSelectedIndex(0);

        }
    }//GEN-LAST:event_time2ActionPerformed

    private void requestButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestButtonMouseClicked
        if (paperIdText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Select Paper");
        } else {
            if (o1IsTrue == true || o2IsTrue == true) {
                if (timeLimit1 == true || timeLimit2 == true) {
                    try {
                        int qq = Integer.parseInt(op3.getText());
                        int qCount = Integer.parseInt(qCountLabel.getText());
                        if (qq > qCount || qq <= 0) {
                            op3.setText(null);
                        }

                        if (Integer.parseInt(op2.getText()) > Integer.parseInt(op3.getText()) || Integer.parseInt(op2.getText()) == Integer.parseInt(op3.getText())) {
                            op2.setText(null);
                            op3.setText(null);
                            op3.setEditable(false);
                        }

                        if (Integer.parseInt(op3.getText()) < Integer.parseInt(op2.getText()) || Integer.parseInt(op2.getText()) == Integer.parseInt(op3.getText())) {
                            op2.setText(null);
                            op3.setText(null);
                            op3.setEditable(false);
                        }

                    } catch (NumberFormatException ex) {
                    }
                    ///////////////////////////////////
                    if (o1IsTrue == true) {
                        if (op1.getText().isEmpty() || op1.getText() == null) {
                            JOptionPane.showMessageDialog(null, "Enter Question Count");
                        } else {
                            requestMethod();
                        }
                    } else {
                        if (op2.getText().isEmpty() || op2.getText() == null || op3.getText().isEmpty() || op3.getText() == null) {
                            JOptionPane.showMessageDialog(null, "Enter Question Range");
                        } else {
                            requestMethod();
                        }
                    }

                    //////////////////////////////////   
                } else {
                    JOptionPane.showMessageDialog(null, "Select Time Limit");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Select Question Range");
            }

        }
    }//GEN-LAST:event_requestButtonMouseClicked

    private void requestButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestButtonMouseEntered
        requestButton.setForeground(Color.black);
    }//GEN-LAST:event_requestButtonMouseEntered

    private void requestButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requestButtonMouseExited
        requestButton.setForeground(Color.WHITE);          // TODO add your handling code here:
    }//GEN-LAST:event_requestButtonMouseExited

    private void downloadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadButtonMouseClicked
        StringBuilder builder = new StringBuilder();
        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();

            ArrayList<Question> allQuestion = qc.getAllQuestion(path + "/" + paperNameText.getText() + ".txt");
            System.out.println("Question Size :" + allQuestion.size());

            for (int i = 0; i < allQuestion.size(); i++) {
                builder.append("\n" + allQuestion.get(i).getqNumber() + ") " + allQuestion.get(i).getMainQ() + "\n\n\t" + "A. " + allQuestion.get(i).getQ1() + "\n\t" + "B. " + allQuestion.get(i).getQ2() + "\n\t" + "C. " + allQuestion.get(i).getQ3() + "\n\t" + "D. " + allQuestion.get(i).getQ4() + "\n");
            }

            //save Dialog
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(new File(paperNameText.getText() + ".pdf"));

            int userSelection = fileChooser.showSaveDialog(this);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                String path = fileChooser.getSelectedFile().getPath();
                System.out.println("Save as file: " + path);

                OutputStream file = new FileOutputStream(new File(path));
                //  File file = new File(paperNameText.getText());
                //////////////pdf////////////////////////////////
                Document document = new Document();
                PdfWriter.getInstance(document, file);
                document.open();

                //addimage
                Image img = Image.getInstance("src\\edu\\ijse\\gdse37\\examsuccess\\view\\photos\\ijseLogo.png");
                img.setAlignment(Image.MIDDLE);

                com.itextpdf.text.Font font = FontFactory.getFont("Wide Latin", 25, BaseColor.BLACK);
                Paragraph p1 = new Paragraph("Institute of Java & Software Engineering\n", font);
                p1.setAlignment(Element.ALIGN_CENTER);

                //paper Name
                com.itextpdf.text.Font font1 = FontFactory.getFont("Wide Latin", 12, BaseColor.BLACK);
                Paragraph p2 = new Paragraph(paperNameText.getText() + "\n\n", font);
                p2.setAlignment(Element.ALIGN_CENTER);

                //addtodoc
                document.add(img);
                document.add(p1);
                document.add(p2);
                document.add(new Paragraph(builder.toString()));
                document.close();
                file.close();
            }

        } catch (NotBoundException ex) {
        } catch (MalformedURLException ex) {
        } catch (RemoteException ex) {
        } catch (IOException ex) {
        } catch (DocumentException ex) {
            Logger.getLogger(PracticeExamSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_downloadButtonMouseClicked

    private void downloadButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadButtonMouseEntered
        downloadButton.setBorder(new MotifBorders.BevelBorder(true, Color.blue, Color.blue));         // TODO add your handling code here:
    }//GEN-LAST:event_downloadButtonMouseEntered

    private void downloadButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadButtonMouseExited
        downloadButton.setBorder(null);
    }//GEN-LAST:event_downloadButtonMouseExited

    private void op1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op1KeyPressed
        Validation.numberOnly(op1);        // TODO add your handling code here:
    }//GEN-LAST:event_op1KeyPressed

    private void op2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op2KeyPressed
        Validation.numberOnly(op2);        // TODO add your handling code here:
    }//GEN-LAST:event_op2KeyPressed

    private void op3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op3KeyPressed
        Validation.numberOnly(op3);        // TODO add your handling code here:
    }//GEN-LAST:event_op3KeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox batchCombo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cemesterCombo;
    private javax.swing.JLabel downloadButton;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel myPanel;
    private javax.swing.JRadioButton o1;
    private javax.swing.JRadioButton o2;
    private javax.swing.JTextField op1;
    private javax.swing.JTextField op2;
    private javax.swing.JTextField op3;
    private javax.swing.JLabel paperId;
    private javax.swing.JTextField paperIdText;
    private javax.swing.JTextField paperNameText;
    private javax.swing.JTextField qCountLabel;
    private javax.swing.JLabel requestButton;
    private javax.swing.JScrollPane sdfsdf;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JTable table;
    private javax.swing.JRadioButton time1;
    private javax.swing.JRadioButton time2;
    private javax.swing.JComboBox timeLimitHourCombo;
    private javax.swing.JComboBox timeLimitMiniteCombo;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    public void fillCombo() {

        try {
            BatchController bc = ServerConnecter.getServerConnecter().getBatchController();
            SemesterController cc = ServerConnecter.getServerConnecter().getCemesterController();
            SubjectController sc = ServerConnecter.getServerConnecter().getSubjectController();

            ////batch combo
            ArrayList<Batch> allBatch = bc.getAllBatch();
            batchCombo.removeAll();
            for (Batch b : allBatch) {
                batchCombo.addItem(b.getBatchName());
            }

            ////Cemster Combo
            ArrayList<Cemester> allCemester = cc.getAllCemester();
            cemesterCombo.removeAll();
            for (Cemester c : allCemester) {
                cemesterCombo.addItem(c.getCemesterName());
            }

            /////Subject Combo
            ArrayList<Subject> allSubject = sc.getAllSubject();
            subjectCombo.removeAll();
            for (Subject s : allSubject) {
                subjectCombo.addItem(s.getSubjectName());
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     */
    public void fillDataToTable() {
        try {
            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;

            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            System.out.println(path);
            ArrayList<String> publishPapers = qc.getPublishPapers(path);

            //////////loard table data////////////////
            DefaultTableModel dtm = new DefaultTableModel();
            dtm = (DefaultTableModel) table.getModel();
//        table.getTableHeader().setBackground(Color.blue);
            dtm.setRowCount(0);
            table.setRowHeight(25);

            for (String s : publishPapers) {
                String[] split = s.split(":");
                Object[] row = {split[0], split[1].replace(".txt", "")};
                dtm.addRow(row);
            }

        } catch (NullPointerException ex) {
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
        } catch (IOException ex) {
        }
    }

    /**
     *
     */
    public void requestMethod() {
        String fileName = paperNameText.getText();
        String startQ = null;
        String endQ = null;
        if (o1IsTrue) {

            startQ = "1";
            endQ = op1.getText();

        } else if (o2IsTrue) {

            startQ = op2.getText();
            endQ = op3.getText();

        }

        if (timeLimit1) {

            BeginExam pe = new BeginExam();

            pe.setData(path, fileName, startQ, endQ, paperNameText.getText(), studentId, time, pId);
            student.clearPanel();
            pe.setVisible(true);

        } else {

            //setTimeLimt
            try {
                String hour = timeLimitHourCombo.getSelectedItem().toString();
                String minite = timeLimitMiniteCombo.getSelectedItem().toString();

                time = hour + ":" + minite;

            } catch (NullPointerException | NumberFormatException ex) {
            }

            if (time.equals("00:00")) {
                JOptionPane.showMessageDialog(null, "Select Time Limit");
            } else {

                BeginExam be = new BeginExam();
                be.setTime(path, fileName, startQ, endQ, paperNameText.getText(), studentId, time, pId);

                student.clearPanel();

                be.setVisible(true);
            }
        }
    }

    /**
     *
     * @param message
     */
    public void updateMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
}
