/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.examsuccess.view.manage;

import com.sun.java.swing.plaf.motif.MotifBorders;
import edu.ijse.gdse37.examsuccess.model.Batch;
import edu.ijse.gdse37.examsuccess.model.Cemester;
import edu.ijse.gdse37.examsuccess.model.Subject;
import edu.ijse.gdse37.examsuccess.connecter.ServerConnecter;
import edu.ijse.gdse37.examsuccess.controller.BatchController;
import edu.ijse.gdse37.examsuccess.controller.SemesterController;
import edu.ijse.gdse37.examsuccess.controller.QuestionController;
import edu.ijse.gdse37.examsuccess.controller.ResultController;
import edu.ijse.gdse37.examsuccess.controller.StudentController;
import edu.ijse.gdse37.examsuccess.controller.SubjectController;
import edu.ijse.gdse37.examsuccess.model.Result;
import edu.ijse.gdse37.examsuccess.model.Student;
import edu.ijse.gdse37.examsuccess.view.other.Validation;
import edu.ijse.gdse37.examsuccess.view.student.Add_Student_Panal;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ashan Tharuka
 */
public class ViewAdminResult extends javax.swing.JPanel {

    private SimpleDateFormat sf;
    private String studentId;
    private String batchPath;
    private boolean me;
    private boolean all;
    private boolean high;
    private boolean low;
    private boolean absent;
    private boolean searchId;
    private String path;
    private String date;
    private String batch;
    private String subject;
    private String cemester;
    private String fileName;
    private ArrayList<Result> searchAllStudentResult;
    private Result result;
    private ArrayList<Integer> marksList;
    private ArrayList<String> correctAnswers;
    private ArrayList<String> resultList;
    private int startQ;
    private int endQ;
    private int correctAns;
    private int wrongAns;
    private String grade;
    private String marks;
    private HashSet<String> setList;
    private PracticeExamResultReport perr;
    private HashMap<String, String> studentAnswerList;

    /**
     * Creates new form MainAdmin
     *
     */
    public ViewAdminResult() {
        initComponents();
        setSize(990, 600);
        fillCombo();
        getpapersName();
        sf = new SimpleDateFormat("yyyy-MM-dd");

        this.marksList = new ArrayList<>();
        this.correctAnswers = new ArrayList<>();
        this.resultList = new ArrayList<>();

        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        batchCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cemesterCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        subjectCombo = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox();
        datePiker = new org.jdesktop.swingx.JXDatePicker();
        jLabel17 = new javax.swing.JLabel();
        myPanel = new javax.swing.JPanel();
        highRadio = new javax.swing.JRadioButton();
        lowRadio = new javax.swing.JRadioButton();
        searchRadio = new javax.swing.JRadioButton();
        idText = new javax.swing.JTextField();
        absentRadio = new javax.swing.JRadioButton();
        reportButton = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        reportButton1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JLabel();

        setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        batchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                batchComboItemStateChanged(evt);
            }
        });
        batchCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchComboMouseClicked(evt);
            }
        });
        jPanel1.add(batchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 150, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Batch");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 150, 40));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Cemester");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, 170, 40));

        cemesterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cemesterComboItemStateChanged(evt);
            }
        });
        cemesterCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cemesterComboMouseClicked(evt);
            }
        });
        jPanel1.add(cemesterCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 170, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Subject");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 140, 40));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Exam Id", "Paper", "Student Id", "Marks", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        table.setRowHeight(25);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel1.add(scrollpane, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 630, 380));

        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        subjectCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectComboMouseClicked(evt);
            }
        });
        jPanel1.add(subjectCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 140, 30));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Select Date ");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 130, 40));

        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        typeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeComboMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                typeComboMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                typeComboMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                typeComboMouseReleased(evt);
            }
        });
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });
        jPanel1.add(typeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 140, 30));

        datePiker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datePikerMouseClicked(evt);
            }
        });
        jPanel1.add(datePiker, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 80, 140, 30));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Paper");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 40, 130, 40));

        myPanel.setBackground(new java.awt.Color(255, 255, 255));
        myPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        myPanel.setLayout(null);

        highRadio.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(highRadio);
        highRadio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        highRadio.setText("  High Marks");
        highRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highRadioActionPerformed(evt);
            }
        });
        myPanel.add(highRadio);
        highRadio.setBounds(50, 180, 160, 25);

        lowRadio.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(lowRadio);
        lowRadio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lowRadio.setText("  Low Marks");
        lowRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowRadioActionPerformed(evt);
            }
        });
        myPanel.add(lowRadio);
        lowRadio.setBounds(50, 220, 170, 25);

        searchRadio.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(searchRadio);
        searchRadio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchRadio.setText("  Student Id Search");
        searchRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRadioActionPerformed(evt);
            }
        });
        myPanel.add(searchRadio);
        searchRadio.setBounds(40, 20, 160, 30);

        idText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        idText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextActionPerformed(evt);
            }
        });
        idText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idTextKeyReleased(evt);
            }
        });
        myPanel.add(idText);
        idText.setBounds(70, 60, 130, 30);

        absentRadio.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(absentRadio);
        absentRadio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        absentRadio.setText("  Absent");
        absentRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absentRadioActionPerformed(evt);
            }
        });
        myPanel.add(absentRadio);
        absentRadio.setBounds(50, 270, 110, 25);

        reportButton.setBackground(new java.awt.Color(102, 102, 102));
        reportButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reportButton.setForeground(new java.awt.Color(255, 255, 255));
        reportButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reportButton.setText("Get Report");
        reportButton.setOpaque(true);
        reportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reportButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                reportButtonMouseExited(evt);
            }
        });
        myPanel.add(reportButton);
        reportButton.setBounds(60, 310, 140, 40);
        myPanel.add(jSeparator1);
        jSeparator1.setBounds(0, 160, 260, 20);

        reportButton1.setBackground(new java.awt.Color(102, 102, 102));
        reportButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reportButton1.setForeground(new java.awt.Color(255, 255, 255));
        reportButton1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reportButton1.setText("Get All Result");
        reportButton1.setOpaque(true);
        reportButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportButton1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                reportButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                reportButton1MouseExited(evt);
            }
        });
        myPanel.add(reportButton1);
        reportButton1.setBounds(70, 100, 130, 30);

        jPanel1.add(myPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 150, 260, 380));

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/serachButton.png"))); // NOI18N
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchButtonMouseExited(evt);
            }
        });
        jPanel1.add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 60, 120, 60));

        add(jPanel1);
        jPanel1.setBounds(0, 0, 990, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void batchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_batchComboItemStateChanged
        getpapersName();      // TODO add your handling code here:
    }//GEN-LAST:event_batchComboItemStateChanged

    private void batchComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_batchComboMouseClicked

    private void cemesterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cemesterComboItemStateChanged
        getpapersName();         // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboItemStateChanged

    private void cemesterComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cemesterComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboMouseClicked

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged
        getpapersName();
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void subjectComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectComboMouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboMouseClicked

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int rowCount = table.getRowCount();

        int index = table.getSelectedRow();
        String examId = table.getValueAt(table.getSelectedRow(), 0).toString();
        if (examId.equals("Absent")) {

        } else {

            if (searchAllStudentResult == null) {

            } else {
                //loard
                loardResultReport(index);
            }

        }

    }//GEN-LAST:event_tableMouseClicked

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        //  getpapersName();
    }//GEN-LAST:event_typeComboItemStateChanged

    private void typeComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboMouseClicked

    private void typeComboMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseExited

    }//GEN-LAST:event_typeComboMouseExited

    private void typeComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMousePressed

    }//GEN-LAST:event_typeComboMousePressed

    private void typeComboMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboMouseReleased

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed

    }//GEN-LAST:event_typeComboActionPerformed

    private void datePikerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datePikerMouseClicked

    }//GEN-LAST:event_datePikerMouseClicked

    private void lowRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowRadioActionPerformed
        try {
            low = lowRadio.isSelected();
            if (low) {
                high = false;
                searchId = false;
                absent = false;
                idText.setText(null);
                DefaultTableModel dtm = (DefaultTableModel) table.getModel();
                int row = 0;
                Integer min = Collections.min(marksList);
                for (int i = 0; i < marksList.size(); i++) {
                    if (min == marksList.get(i)) {
                        row = i;
                    }
                }
                System.out.println("Low row: " + row);

                // table.setRowSelectionAllowed(low);
                table.getSelectionModel().setSelectionInterval(row, row);

            }
        } catch (NoSuchElementException | IllegalArgumentException | NullPointerException ex) {

        }
    }//GEN-LAST:event_lowRadioActionPerformed

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        idText.setText(null);

        try {
            batch = batchCombo.getSelectedItem().toString();
            cemester = cemesterCombo.getSelectedItem().toString();
            subject = subjectCombo.getSelectedItem().toString();
            fileName = typeCombo.getSelectedItem().toString();

        } catch (NullPointerException ex) {
        }

        Date d1 = new Date();
        try {
            if (datePiker.getDate() != null) {
                sf = new SimpleDateFormat("yyyy-MM-dd");
                d1 = datePiker.getDate();
                date = sf.format(d1);

                try {
                    ResultController rc = ServerConnecter.getServerConnecter().getResultController();
                    String resultPath = batch + "/" + cemester + "/" + subject + "/" + fileName.replace(".txt", "") + "/" + date;
                    searchAllStudentResult = rc.SearchAllStudentResult(resultPath);
                    loardAllStudentData();
                } catch (NotBoundException ex) {
                    Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Select Date!!!", "Warning", 2);
            }
        } catch (NullPointerException | NumberFormatException ex) {
        }
    }//GEN-LAST:event_searchButtonMouseClicked

    private void searchButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseEntered
        searchButton.setBorder(new MotifBorders.BevelBorder(true, Color.red, Color.red));        // TODO add your handling code here:
    }//GEN-LAST:event_searchButtonMouseEntered

    private void searchButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseExited
        searchButton.setBorder(null);
    }//GEN-LAST:event_searchButtonMouseExited

    private void highRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highRadioActionPerformed
        try {
            high = highRadio.isSelected();
            if (high) {
                low = false;
                searchId = false;
                absent = false;
                idText.setText(null);
                DefaultTableModel dtm = (DefaultTableModel) table.getModel();
                int row = 0;
                Integer max = Collections.max(marksList);
                for (int i = 0; i < marksList.size(); i++) {
                    if (max == marksList.get(i)) {
                        row = i;
                    }
                }
                System.out.println("High row: " + row);
                table.setRowSelectionInterval(row, row);

            }
        } catch (NoSuchElementException | IllegalArgumentException | NullPointerException ex) {

        }
    }//GEN-LAST:event_highRadioActionPerformed

    private void searchRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRadioActionPerformed
        searchId = searchRadio.isSelected();
        if (searchId) {
            high = false;
            low = false;
            absent = false;

            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            int row = 0;
            //
        }
    }//GEN-LAST:event_searchRadioActionPerformed

    private void idTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextActionPerformed
        try {
            batch = batchCombo.getSelectedItem().toString();
            cemester = cemesterCombo.getSelectedItem().toString();
            subject = subjectCombo.getSelectedItem().toString();
            fileName = typeCombo.getSelectedItem().toString();

        } catch (NullPointerException ex) {
        }
        if (datePiker.getDate() != null) {
            Date d1 = new Date();
            sf = new SimpleDateFormat("yyyy-MM-dd");
            d1 = datePiker.getDate();
            date = sf.format(d1);

            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            int row = 0;
            if (searchId) {
                if (idText.getText().isEmpty() || idText.getText() == null) {
                    JOptionPane.showMessageDialog(null, "Enter Student ID", "Warning", 1);
                } else {

                    try {
                        StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
                        boolean isTrue = sc.searchId(idText.getText());
                        if (isTrue) {
                            try {
                                ResultController rc = ServerConnecter.getServerConnecter().getResultController();
                                String resultPath = batch + "/" + cemester + "/" + subject + "/" + fileName.replace(".txt", "") + "/" + date;
                                result = rc.SearchStudentResult(idText.getText(), resultPath);
                                if (result == null) {
                                    JOptionPane.showMessageDialog(null, "No Result");
                                } else {
                                    loardOneStudentData();
                                }

                            } catch (NotBoundException ex) {
                                Logger.getLogger(ViewStudentResult.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (MalformedURLException ex) {
                                Logger.getLogger(ViewStudentResult.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (RemoteException ex) {
                                Logger.getLogger(ViewStudentResult.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(ViewStudentResult.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            idText.setText(null);
                            JOptionPane.showMessageDialog(null, "Not Match");
                        }
                    } catch (NotBoundException ex) {
                        Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (RemoteException ex) {
                        Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Select Search Student ID Option");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select Date");
        }

    }//GEN-LAST:event_idTextActionPerformed

    private void idTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextKeyPressed
        Validation.validationText(idText);        // TODO add your handling code here:
    }//GEN-LAST:event_idTextKeyPressed

    private void idTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextKeyReleased
        Validation.validationText(idText);        // TODO add your handling code here:
    }//GEN-LAST:event_idTextKeyReleased

    private void absentRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absentRadioActionPerformed
        marksList = null;
        absent = absentRadio.isSelected();
        if (absent) {
            high = false;
            low = false;
            searchId = false;

            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            dtm.setRowCount(0);
            for (String studentId : setList) {
                Object[] rows = {"Absent", "Absent", studentId, "", "Absent"};
                dtm.addRow(rows);
            }
        }
    }//GEN-LAST:event_absentRadioActionPerformed

    private void reportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButtonMouseClicked
        int i = table.getRowCount();
        if (i < 1) {
            JOptionPane.showMessageDialog(null, "No Data");
        } else {
            try {
                InputStream is = getClass().getResourceAsStream("../jasper/ResultReport.jrxml");
                JasperReport jr = JasperCompileManager.compileReport(is);
                JasperPrint jp = JasperFillManager.fillReport(jr, new HashMap<String, Object>(), new JRTableModelDataSource(table.getModel()));
                JasperViewer.viewReport(jp, false);
            } catch (JRException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_reportButtonMouseClicked

    private void reportButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButtonMouseEntered
        reportButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_reportButtonMouseEntered

    private void reportButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButtonMouseExited
        reportButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_reportButtonMouseExited

    private void reportButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButton1MouseClicked

        if (idText.getText().isEmpty() || idText.getText() == null) {
            JOptionPane.showMessageDialog(null, "Enter Student Id");
        } else {
            try {
                ResultController resultController = ServerConnecter.getServerConnecter().getResultController();
                ArrayList<Result> studentAllResult = resultController.getStudentAllResult(idText.getText());
                DefaultTableModel dtm = (DefaultTableModel) table.getModel();
                dtm.setRowCount(0);
                for (Result r : studentAllResult) {
                    Object[] row = {r.getExamId(), r.getPaperName(), r.getStudentId(), r.getMarks(), r.getGrade()};
                    dtm.addRow(row);
                }
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ViewAdminResult.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_reportButton1MouseClicked

    private void reportButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButton1MouseEntered
        reportButton1.setForeground(new Color(102, 255, 255));        // TODO add your handling code here:
    }//GEN-LAST:event_reportButton1MouseEntered

    private void reportButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportButton1MouseExited
        reportButton1.setForeground(Color.white);           // TODO add your handling code here:
    }//GEN-LAST:event_reportButton1MouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton absentRadio;
    private javax.swing.JComboBox batchCombo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cemesterCombo;
    private org.jdesktop.swingx.JXDatePicker datePiker;
    private javax.swing.JRadioButton highRadio;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton lowRadio;
    private javax.swing.JPanel myPanel;
    private javax.swing.JLabel reportButton;
    private javax.swing.JLabel reportButton1;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JLabel searchButton;
    private javax.swing.JRadioButton searchRadio;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JTable table;
    private javax.swing.JComboBox typeCombo;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    public void fillCombo() {

        try {
            BatchController bc = ServerConnecter.getServerConnecter().getBatchController();
            SemesterController cc = ServerConnecter.getServerConnecter().getCemesterController();
            SubjectController sc = ServerConnecter.getServerConnecter().getSubjectController();

            ////batch combo
            ArrayList<Batch> allBatch = bc.getAllBatch();
            batchCombo.removeAll();
            for (Batch b : allBatch) {
                batchCombo.addItem(b.getBatchName());
            }

            ////Cemster Combo
            ArrayList<Cemester> allCemester = cc.getAllCemester();
            cemesterCombo.removeAll();
            for (Cemester c : allCemester) {
                cemesterCombo.addItem(c.getCemesterName());
            }

            /////Subject Combo
            ArrayList<Subject> allSubject = sc.getAllSubject();
            subjectCombo.removeAll();
            for (Subject s : allSubject) {
                subjectCombo.addItem(s.getSubjectName());
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     */
    public void getpapersName() {
        try {
            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
        } catch (NullPointerException ex) {
        }
        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            ArrayList<String> papersNameList = qc.getPapersName(path);
            if (papersNameList == null) {
                typeCombo.removeAllItems();

            } else {
                typeCombo.removeAllItems();

                for (String s : papersNameList) {
                    String ss = s.replace(".txt", "");
                    typeCombo.addItem(ss);
                }

            }

        } catch (MalformedURLException | RemoteException | NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     */
    public void loardAllStudentData() {
        ArrayList<Student> allStudentsOfBatch = new ArrayList<>();
        System.out.println("1");
        marksList = null;
        marksList = new ArrayList<>();
        System.out.println("2");
        setList = new HashSet<String>();
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.setRowCount(0);
        try {

            for (int i = 0; i < searchAllStudentResult.size() + 1; i++) {
                Result r = searchAllStudentResult.get(i);
                marksList.add(Integer.parseInt(r.getMarks()));
                Object[] row = {r.getExamId(), r.getPaperName(), r.getStudentId(), r.getMarks(), r.getGrade()};
                dtm.addRow(row);

            }
        } catch (IndexOutOfBoundsException ex) {
            System.out.println("ERROR");
        }
        try {
            StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
            allStudentsOfBatch = sc.getAllStudentsOfBatch(batch);
            System.out.println("All Student Size: " + allStudentsOfBatch.size());

            for (int i = 0; i < allStudentsOfBatch.size() + 1; i++) {

                for (int j = 0; j < searchAllStudentResult.size() + 1; j++) {
                    System.out.println("Search Result :" + searchAllStudentResult.get(j).getStudentId());
                    if (searchAllStudentResult.get(j).getStudentId().equals(allStudentsOfBatch.get(i).getId())) {
                        System.out.println("Equal :" + allStudentsOfBatch.get(i).getId());
                    } else {
                        System.out.println("OUT: " + allStudentsOfBatch.get(i).getId());
                        setList.add(allStudentsOfBatch.get(i).getId());
                    }

                }
            }
        } catch (IndexOutOfBoundsException | IOException | NotBoundException ex) {

        }

    }

    /**
     *
     */
    public void loardOneStudentData() {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.setRowCount(0);

        Object[] row = {result.getExamId(), result.getPaperName(), result.getStudentId(), result.getMarks(), result.getGrade()};
        dtm.addRow(row);

    }

    /**
     *
     * @param index
     */
    public void loardResultReport(int index) {
        result = null;
        perr = null;
        correctAns = 0;
        wrongAns = 0;
        correctAnswers = null;
        resultList = null;
        resultList = new ArrayList<>();
        correctAnswers = new ArrayList<>();
        studentAnswerList = new HashMap<>();
        result = searchAllStudentResult.get(index);
        startQ = Integer.parseInt(result.getStartQ());
        endQ = Integer.parseInt(result.getEndQ());
        grade = result.getGrade();
        marks = null;
        marks = result.getMarks();
        fileName = result.getPaperName().replace(".txt", "");
        studentId = result.getStudentId();

        System.out.println("Full Ans: " + result.getStudentAns());
        String[] ans = result.getStudentAns().split("#");
        try {
            for (int i = 0; i < ans.length; i++) {
                System.out.println("ans: " + ans[i]);
                String[] split = ans[i].split("%");
                studentAnswerList.put(split[0], split[1]);
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
        }
        System.out.println("Sudents Ans List size : " + studentAnswerList.size());
        //get answers

        for (int i = startQ; i < endQ + 1; i++) {

            try {
                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                correctAnswers.add(qc.getAnswers(path, fileName + ".txt", i));

            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(Final_Exam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Final_Exam.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("Student Ans ArrayList Size :" + studentAnswerList.size());
        System.out.println("Correct Ans ArrayList Size :" + correctAnswers.size());

        //check correct Answers 
        if (correctAnswers.size() == 0) {

        } else {
            for (int i = 0; i < correctAnswers.size(); i++) {
                if (studentAnswerList.containsKey(Integer.toString(i + startQ))) {
                    if (studentAnswerList.get(Integer.toString(i + startQ)).equals(correctAnswers.get(i))) {

                        ++correctAns;
                        resultList.add("Correct");
                    } else if (studentAnswerList.get(Integer.toString(i + startQ)).equals("*:*:*:*")) {

                        resultList.add("Not Answered");
                    } else {

                        ++wrongAns;
                        resultList.add("Wrong");
                    }
                } else {

                    resultList.add("Not Answered");
                }

            }
        }

        for (String s : resultList) {
            System.out.println(s);
        }
        //
        perr = new PracticeExamResultReport();
        perr.setFinalExamData(path, fileName, studentId, Integer.toString(correctAns), Integer.toString(wrongAns), correctAnswers, studentAnswerList, startQ, endQ, resultList, grade, marks);
        perr.setVisible(true);

    }

}
