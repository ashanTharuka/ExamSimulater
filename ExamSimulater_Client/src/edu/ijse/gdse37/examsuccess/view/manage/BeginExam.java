/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.examsuccess.view.manage;

import edu.ijse.gdse37.examsuccess.connecter.ServerConnecter;
import edu.ijse.gdse37.examsuccess.controller.ExamController;
import java.awt.Color;
import java.awt.Frame;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ashan Tharuka
 */
public class BeginExam extends javax.swing.JFrame {

    private int xMouse;
    private int yMouse;
    private String path;
    private String fileName;
    private String startQ;
    private String endQ;
    private String studentId;
    private String timeLimit;
    private String time;
    private SimpleDateFormat sdf;
    private String examId;
    private String papaerId;
    private boolean late;

    /**
     * Creates new form Login
     *
     */
    public BeginExam() {
        this.setUndecorated(true);
        setDefaultCloseOperation(2);
        this.setBackground(new Color(0, 255, 0, 0));
        initComponents();
        setLocationRelativeTo(null);
        waitLabel.setVisible(false);
        timeLabel.setVisible(false);
        begin2Button.setVisible(false);
      
        setSize(943, 401);
        time = null;
        late = false;
        sdf = new SimpleDateFormat("HH:mm:ss a");

        //com.sun.awt.AWTUtilities.setWindowOpacity(this, 0.5f);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        beginButton = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        waitLabel = new javax.swing.JLabel();
        paperNameLabel = new javax.swing.JLabel();
        closePanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        minimizePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        begin2Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(943, 401));
        setUndecorated(true);
        getContentPane().setLayout(null);

        beginButton.setBackground(new java.awt.Color(171, 227, 247));
        beginButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        beginButton.setForeground(new java.awt.Color(255, 255, 255));
        beginButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        beginButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/blackButton.png"))); // NOI18N
        beginButton.setText("<html>Begin <br>");
        beginButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        beginButton.setMinimumSize(new java.awt.Dimension(110, 50));
        beginButton.setPreferredSize(new java.awt.Dimension(110, 50));
        beginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                beginButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                beginButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                beginButtonMouseExited(evt);
            }
        });
        getContentPane().add(beginButton);
        beginButton.setBounds(720, 300, 170, 60);

        timeLabel.setFont(new java.awt.Font("DS-Digital", 1, 48)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(204, 0, 0));
        getContentPane().add(timeLabel);
        timeLabel.setBounds(640, 110, 240, 60);
        getContentPane().add(waitLabel);
        waitLabel.setBounds(430, 110, 220, 60);

        paperNameLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        paperNameLabel.setForeground(new java.awt.Color(255, 204, 0));
        paperNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(paperNameLabel);
        paperNameLabel.setBounds(400, 190, 500, 60);

        closePanel.setBackground(new java.awt.Color(255, 255, 255));
        closePanel.setForeground(new java.awt.Color(255, 255, 255));
        closePanel.setPreferredSize(new java.awt.Dimension(40, 40));
        closePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closePanelMouseExited(evt);
            }
        });
        closePanel.setLayout(null);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/icon-nav-close.png"))); // NOI18N
        closePanel.add(jLabel3);
        jLabel3.setBounds(10, 10, 20, 20);

        getContentPane().add(closePanel);
        closePanel.setBounds(820, 20, 40, 40);

        minimizePanel.setBackground(new java.awt.Color(255, 255, 255));
        minimizePanel.setPreferredSize(new java.awt.Dimension(40, 40));
        minimizePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizePanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizePanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizePanelMouseExited(evt);
            }
        });
        minimizePanel.setLayout(null);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/020739-rounded-glossy-black-icon-symbols-shapes-minimize.png"))); // NOI18N
        minimizePanel.add(jLabel4);
        jLabel4.setBounds(10, 20, 20, 10);

        getContentPane().add(minimizePanel);
        minimizePanel.setBounds(770, 20, 40, 40);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edu/ijse/gdse37/examsuccess/view/photos/beginExam.png"))); // NOI18N
        jLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel2MouseDragged(evt);
            }
        });
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 950, 400);

        begin2Button.setText("jButton1");
        begin2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                begin2ButtonActionPerformed(evt);
            }
        });
        getContentPane().add(begin2Button);
        begin2Button.setBounds(590, 340, 73, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closePanelMouseClicked
        this.dispose();
    }//GEN-LAST:event_closePanelMouseClicked

    private void closePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closePanelMouseEntered
        closePanel.setBackground(Color.pink); // TODO add your handling code here:
    }//GEN-LAST:event_closePanelMouseEntered

    private void closePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closePanelMouseExited
        closePanel.setBackground(Color.white);  // TODO add your handling code here:
    }//GEN-LAST:event_closePanelMouseExited

    private void minimizePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizePanelMouseClicked
        this.setState(Frame.ICONIFIED);// TODO add your handling code here:
    }//GEN-LAST:event_minimizePanelMouseClicked

    private void minimizePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizePanelMouseEntered
        minimizePanel.setBackground(Color.pink); // TODO add your handling code here:
    }//GEN-LAST:event_minimizePanelMouseEntered

    private void minimizePanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizePanelMouseExited
        minimizePanel.setBackground(Color.white);  // TODO add your handling code here:
    }//GEN-LAST:event_minimizePanelMouseExited

    private void jLabel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseDragged

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();          // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MousePressed

    private void beginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beginButtonMouseClicked
        if (time == null) {
            Practice_Exam practiceExam = new Practice_Exam(path, fileName, startQ, endQ, studentId, papaerId);
            practiceExam.setVisible(true);
            this.dispose();
        } else {
            Practice_Exam practiceExam = new Practice_Exam(path, fileName, startQ, endQ, studentId, time, papaerId);
            practiceExam.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_beginButtonMouseClicked

    private void beginButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beginButtonMouseEntered
        beginButton.setForeground(new Color(204, 255, 255));
    }//GEN-LAST:event_beginButtonMouseEntered

    private void beginButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_beginButtonMouseExited
        beginButton.setForeground(Color.WHITE);          // TODO add your handling code here:
    }//GEN-LAST:event_beginButtonMouseExited

    private void begin2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_begin2ButtonActionPerformed
  Final_Exam final_Exam = new Final_Exam(path, fileName, startQ, endQ, studentId, timeLimit, examId, papaerId, late,this);
        final_Exam.setVisible(true);
              // TODO add your handling code here:
    }//GEN-LAST:event_begin2ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BeginExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BeginExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BeginExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BeginExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BeginExam().setVisible(true);
            }
        });
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Practice_Exam().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton begin2Button;
    private javax.swing.JLabel beginButton;
    private javax.swing.JPanel closePanel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel minimizePanel;
    private javax.swing.JLabel paperNameLabel;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel waitLabel;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param path
     * @param fileName
     * @param startQ
     * @param endQ
     * @param paperName
     * @param studentId
     * @param time
     * @param paperId
     * setData to UI
     */
    public void setData(String path, String fileName, String startQ, String endQ, String paperName, String studentId, String time, String paperId) {
        this.path = path;
        this.fileName = fileName;
        this.startQ = startQ;
        this.endQ = endQ;
        this.studentId = studentId;
        this.papaerId = paperId;

        paperNameLabel.setText("Let's Start " + paperName + " Practice Exam");

    }

    /**
     *
     * @param path
     * @param fileName
     * @param startQ
     * @param endQ
     * @param paperName
     * @param studentId
     * @param time
     * @param paperId
     * set time to UI
     */
    public void setTime(String path, String fileName, String startQ, String endQ, String paperName, String studentId, String time, String paperId) {
        this.path = path;
        this.fileName = fileName;
        this.startQ = startQ;
        this.endQ = endQ;
        this.studentId = studentId;
        paperNameLabel.setText("Let's Start " + paperName + " Practice Exam");
        this.time = time;
        this.papaerId = paperId;

    }

    /**
     *
     * @param path
     * @param fileName
     * @param startQ
     * @param endQ
     * @param paperName
     * @param studentId
     * @param startTime
     * @param timeLimit
     * @param examId
     * @param paperId
     * startFinalExam method
     */
    public void startFinalExam(String path, String fileName, String startQ, String endQ, String paperName, String studentId, String startTime, String timeLimit, String examId, String paperId) {
        this.path = path;
        this.fileName = fileName;
        this.startQ = startQ;
        this.endQ = endQ;
        this.studentId = studentId;
        this.timeLimit = timeLimit;
        this.examId = examId;
        this.papaerId = paperId;

        paperNameLabel.setText("Let's Start " + paperName + " Exam");
        waitLabel.setVisible(true);
        timeLabel.setVisible(true);
        checkTime(startTime);

    }

    /**
     *
     * @param startTime
     * @return
     * compare given time with current time
     */
    public boolean checkTime(String startTime) {
        boolean ans = false;
        String userTime1 = null;
        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            String serverDate = ec.getServerDate();
            String[] split = serverDate.split("#");
            userTime1 = split[1];
            Date examTime = new Date();
            Date userTime = new Date();
            userTime = sdf.parse(userTime1);
            System.out.println("UserTime: " + userTime1);
            examTime = sdf.parse(startTime.replace("-", ":"));

            if (examTime.after(userTime)) {
                ans = false;
            } else if (examTime.equals(userTime)) {
                ans = true;
            } else {
                ans = true;
            }
/////////////////////////////////////////////
            SimpleDateFormat ss = new SimpleDateFormat("HH:mm:ss");
//            SimpleDateFormat sdd = new SimpleDateFormat("HH:mm:ss a");
            String[] uT1 = sdf.format(userTime).split(" ");
            String uT2 = uT1[0];
            Date sendUserTime = ss.parse(uT2);
            System.out.println("Edited uT1: " + uT2);

            String[] eT1 = sdf.format(examTime).split(" ");
            String eT2 = eT1[0];
            Date sendExamTime = ss.parse(eT2);
            System.out.println("Edited eT1: " + eT2);

            if (ans) {
                beginButton.setVisible(false);
                SimpleDateFormat es = new SimpleDateFormat("hh:mm:ss");
                es.setTimeZone(TimeZone.getTimeZone("UTC"));
                String sT = startTime.replace("-", ":");
                Date sD = new Date();
                sD = es.parse(sT);
                System.out.println("c: " + timeLimit);
                Date tL = new Date();
                tL = es.parse(timeLimit.replace("-", ":") + ":" + "00");
                System.out.println("s: " + es.format(sD));
                System.out.println("t: " + es.format(tL));
                late = true;
                String serverDate2 = ec.getServerDate();
                String[] split1 = serverDate2.split("#");
                String userTime2 = split1[1];
                Date sub = new Date();
                sub = es.parse(userTime2);

                Date fD = new Date();
                fD = es.parse(timeSubstract(tL, sD, "+"));
                
                
                System.out.println("fD: " + es.format(fD));
                System.out.println("sub: " + es.format(sub));
                timeLimit = timeSubstract(fD, sub, "-");

                System.out.println("subT: " + timeLimit);
                begin2Button.doClick();

            } else {
                beginButton.setVisible(false);
                timeCountThread(sendUserTime, sendExamTime);
            }
        } catch (ParseException ex) {
            Logger.getLogger(ViewSchedule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(BeginExam.class.getName()).log(Level.SEVERE, null, ex);
        }

        return ans;

    }

    /**
     *
     * @param userTime
     * @param examTime
     * start count time till start exam
     */
    public void timeCountThread(Date userTime, Date examTime) {
        try {

            //////////////////////////////////////////////////////////////////
            long diff = userTime.getTime() - examTime.getTime();

            long dM = diff / (60 * 1000) % 60;//Minutes

            long dH = diff / (60 * 60 * 1000) % 24;//Housra

            long dS = diff / 1000 % 60;//Seconds
            SimpleDateFormat ss = new SimpleDateFormat("HH:mm:ss");
            String newTime = dH + ":" + dM + ":" + dS;
            System.out.println("newTime: " + newTime.replace("-", ""));
            Date d3 = ss.parse(newTime.replace("-", ""));
            //////////////////////////////////////////////////////////////////

            String miliTime = "00:00:01";
            Date sencond = ss.parse(miliTime);

            /////////time Thread
            new Thread() {
                public void run() {
                    String timeE = sdf.format(d3);
                    Date d3One = d3;
                    Date d3Two = sencond;

                    while (!(timeE.equals("0:0:0"))) {

                        try {

                            SimpleDateFormat sff = new SimpleDateFormat("hh:mm:ss");

                            long diff = d3One.getTime() - d3Two.getTime();

                            long dM = diff / (60 * 1000) % 60;//Minutes

                            long dH = diff / (60 * 60 * 1000) % 24;//Housra

                            long dS = diff / 1000 % 60;//Seconds

                            d3One = sff.parse(dH + ":" + dM + ":" + dS);
                            timeE = dH + ":" + dM + ":" + dS;
                            timeLabel.setText(dH + ":" + dM + ":" + dS);

                        } catch (ParseException ex) {
                            Logger.getLogger(Practice_Exam.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Practice_Exam.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }

                    Final_Exam final_Exam = new Final_Exam(path, fileName, startQ, endQ, studentId, timeLimit, examId, papaerId);
                    final_Exam.setVisible(true);
                    close();
                }
            }.start();

            //////////////////////////////////////////////////////////////////
        } catch (ParseException ex) {
            Logger.getLogger(BeginExam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *close window using this method from another uI
     */ 
    public void close() {
        this.dispose();
    }

    /**
     *
     * @param first
     * @param sencond
     * @param type
     * @return
     * compare two times
     */
    public String timeSubstract(Date first, Date sencond, String type) {
        SimpleDateFormat sf = new SimpleDateFormat("hh:mm:ss");
        sf.setTimeZone(TimeZone.getTimeZone("UTC"));
        String time = null;
        if (type.equals("+")) {
            try {
                long diff = first.getTime() + sencond.getTime();
                System.out.println("q:" + sf.format(first));
                System.out.println("q:" + sf.format(sencond));
                long dM = diff / (60 * 1000) % 60;//Minutes

                long dH = diff / (60 * 60 * 1000) % 24;//Housra

                long dS = diff / 1000 % 60;//Seconds

                String s = dH + ":" + dM + ":" + dS;
                Date f = new Date();
                f = sf.parse(s);
                time = sf.format(f);

            } catch (ParseException ex) {
                Logger.getLogger(BeginExam.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            try {
                long diff = first.getTime() - sencond.getTime();

                long dM = diff / (60 * 1000) % 60;//Minutes

                long dH = diff / (60 * 60 * 1000) % 24;//Housra

                long dS = diff / 1000 % 60;//Seconds

                String s = dH + ":" + dM + ":" + dS;
                Date f = new Date();
                f = sf.parse(s);
                time = sf.format(f);
            } catch (ParseException ex) {
                Logger.getLogger(BeginExam.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return time;
    }
    

}
