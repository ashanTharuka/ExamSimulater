/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.gdse37.examsuccess.view.manage;

import edu.ijse.gdse37.examsuccess.model.Batch;
import edu.ijse.gdse37.examsuccess.model.Cemester;
import edu.ijse.gdse37.examsuccess.model.Exam;
import edu.ijse.gdse37.examsuccess.model.Question;
import edu.ijse.gdse37.examsuccess.model.Subject;
import edu.ijse.gdse37.examsuccess.view.student.Add_Student_Panal;
import edu.ijse.gdse37.examsuccess.connecter.ServerConnecter;
import edu.ijse.gdse37.examsuccess.controller.BatchController;
import edu.ijse.gdse37.examsuccess.controller.SemesterController;
import edu.ijse.gdse37.examsuccess.controller.ExamController;
import edu.ijse.gdse37.examsuccess.controller.QuestionController;
import edu.ijse.gdse37.examsuccess.controller.StudentController;
import edu.ijse.gdse37.examsuccess.controller.SubjectController;
import edu.ijse.gdse37.examsuccess.model.MoreExam;
import edu.ijse.gdse37.examsuccess.view.admin.Delete_Admin_Panal;
import edu.ijse.gdse37.examsuccess.view.observerimpl.ManageExamObserverImpl;
import edu.ijse.gdse37.examsuccess.view.other.Relese;
import edu.ijse.gdse37.examsuccess.view.other.Validation;
import java.awt.Color;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ashan Tharuka
 */
public class ManageExam extends javax.swing.JPanel {

    private static String examId;
    private String path;
    private String fileName;
    private String date = null;
    private String time;
    private Date d1;
    private SimpleDateFormat sf;

    private String startQ;
    private String endQ;

    private boolean o1IsTrue;
    private boolean o2IsTrue;

    private String aMarks;
    private String bMarks;
    private String cMarks;
    private String wMarks;

    private boolean sendMarksToParent;

    private String questionMarks;

    private String timeLimit;
    private Relese relese;
    private String code;
    private static String code2;

    /**
     * Creates new form MainAdmin
     *
     * @param relese
     */
    public ManageExam(Relese relese) {
        initComponents();
        setSize(990, 600);
        fillCombo();
        getpapersName();
        this.relese = relese;

        op1.setEditable(false);
        op2.setEditable(false);
        op3.setEditable(false);

        try {
            ExamController examController = ServerConnecter.getServerConnecter().getExamController();
            ManageExamObserverImpl manage = new ManageExamObserverImpl(this);
            relese.observerImplOb = manage;
            examController.addManageExamObserver(manage);
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }

        loardDataTotable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        aMark = new javax.swing.JTextField();
        bMark = new javax.swing.JTextField();
        cMark = new javax.swing.JTextField();
        wMark = new javax.swing.JTextField();
        datePiker = new org.jdesktop.swingx.JXDatePicker();
        jLabel15 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JLabel();
        updateButton = new javax.swing.JLabel();
        createButton = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        hourCombo = new javax.swing.JComboBox();
        miniteCombo = new javax.swing.JComboBox();
        send = new javax.swing.JRadioButton();
        jLabel22 = new javax.swing.JLabel();
        pIdText = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        qCountLabel = new javax.swing.JTextField();
        batchCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cemesterCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        subjectCombo = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        questionMarksText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        op1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        o1 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        o2 = new javax.swing.JRadioButton();
        op2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        op3 = new javax.swing.JTextField();
        msgLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        searchText = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        examIdLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        timeLimitHourCombo = new javax.swing.JComboBox();
        timeLimitMiniteCombo = new javax.swing.JComboBox();
        getAllButton = new javax.swing.JLabel();
        getReportButton = new javax.swing.JLabel();

        setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(770, 540));
        jPanel2.setPreferredSize(new java.awt.Dimension(780, 540));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter Pass Marks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel3.setLayout(null);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("B");
        jPanel3.add(jLabel9);
        jLabel9.setBounds(140, 30, 40, 40);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("C");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(240, 30, 40, 40);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("W");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(340, 30, 40, 40);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("A");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(40, 30, 40, 40);

        aMark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aMarkKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aMarkKeyReleased(evt);
            }
        });
        jPanel3.add(aMark);
        aMark.setBounds(40, 70, 40, 30);

        bMark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bMarkKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bMarkKeyReleased(evt);
            }
        });
        jPanel3.add(bMark);
        bMark.setBounds(140, 70, 40, 30);

        cMark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cMarkKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cMarkKeyReleased(evt);
            }
        });
        jPanel3.add(cMark);
        cMark.setBounds(240, 70, 40, 30);

        wMark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wMarkKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wMarkKeyReleased(evt);
            }
        });
        jPanel3.add(wMark);
        wMark.setBounds(340, 70, 40, 30);

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, 480, 150));

        datePiker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datePikerMouseClicked(evt);
            }
        });
        jPanel2.add(datePiker, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 140, 30));

        jLabel15.setText("Select Date :");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 110, 20));

        deleteButton.setBackground(new java.awt.Color(51, 0, 51));
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteButton.setText("Delete");
        deleteButton.setOpaque(true);
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteButtonMouseExited(evt);
            }
        });
        jPanel2.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 530, 90, 40));

        updateButton.setBackground(new java.awt.Color(51, 0, 51));
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        updateButton.setText("Update");
        updateButton.setOpaque(true);
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateButtonMouseExited(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 530, 90, 40));

        createButton.setBackground(new java.awt.Color(51, 0, 51));
        createButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        createButton.setForeground(new java.awt.Color(255, 255, 255));
        createButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        createButton.setText("Create");
        createButton.setOpaque(true);
        createButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                createButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                createButtonMouseExited(evt);
            }
        });
        jPanel2.add(createButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 90, 40));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Time"));
        jPanel4.setLayout(null);

        hourCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "9", "10", "11", "13", "14", "15", "16", "17" }));
        hourCombo.setToolTipText("");
        jPanel4.add(hourCombo);
        hourCombo.setBounds(30, 20, 60, 30);

        miniteCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "15", "30", "45" }));
        jPanel4.add(miniteCombo);
        miniteCombo.setBounds(100, 20, 60, 30);

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 190, 70));

        send.setBackground(new java.awt.Color(255, 255, 255));
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });
        jPanel2.add(send, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 370, 40, 30));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel22.setText("Marks  for One Question  : ");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 150, 30));

        pIdText.setEditable(false);
        jPanel2.add(pIdText, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 40, 60, 30));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Paper Id ");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, -1, 40));

        qCountLabel.setEditable(false);
        qCountLabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        qCountLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qCountLabelActionPerformed(evt);
            }
        });
        jPanel2.add(qCountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 70, 30));

        batchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                batchComboItemStateChanged(evt);
            }
        });
        batchCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchComboMouseClicked(evt);
            }
        });
        jPanel2.add(batchCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 110, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Exam Id :");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 60, 30));

        cemesterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cemesterComboItemStateChanged(evt);
            }
        });
        cemesterCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cemesterComboMouseClicked(evt);
            }
        });
        jPanel2.add(cemesterCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 110, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Semester");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 110, 40));

        subjectCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subjectComboItemStateChanged(evt);
            }
        });
        subjectCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectComboMouseClicked(evt);
            }
        });
        jPanel2.add(subjectCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 40, 110, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Subject");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 110, 40));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Paper");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 130, 40));

        typeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboItemStateChanged(evt);
            }
        });
        typeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeComboMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                typeComboMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                typeComboMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                typeComboMouseReleased(evt);
            }
        });
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });
        jPanel2.add(typeCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 130, 30));

        jLabel23.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel23.setText("Send Result to Parent");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, 130, 30));

        questionMarksText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                questionMarksTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                questionMarksTextKeyReleased(evt);
            }
        });
        jPanel2.add(questionMarksText, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 50, 30));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Question Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        jPanel1.setLayout(null);

        op1.setEditable(false);
        op1.setBackground(new java.awt.Color(255, 255, 255));
        op1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op1ActionPerformed(evt);
            }
        });
        op1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op1KeyReleased(evt);
            }
        });
        jPanel1.add(op1);
        op1.setBounds(90, 30, 50, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Take");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(50, 30, 40, 30);

        o1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(o1);
        o1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o1ActionPerformed(evt);
            }
        });
        jPanel1.add(o1);
        o1.setBounds(10, 30, 30, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Questions from Paper");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(150, 30, 170, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Take Question Range from");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(50, 90, 170, 30);

        o2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(o2);
        o2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                o2ActionPerformed(evt);
            }
        });
        jPanel1.add(o2);
        o2.setBounds(10, 90, 30, 30);

        op2.setEditable(false);
        op2.setBackground(new java.awt.Color(255, 255, 255));
        op2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op2ActionPerformed(evt);
            }
        });
        op2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op2KeyReleased(evt);
            }
        });
        jPanel1.add(op2);
        op2.setBounds(230, 90, 50, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("To");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(290, 90, 30, 30);

        op3.setEditable(false);
        op3.setBackground(new java.awt.Color(255, 255, 255));
        op3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        op3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                op3ActionPerformed(evt);
            }
        });
        op3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                op3KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                op3KeyReleased(evt);
            }
        });
        jPanel1.add(op3);
        op3.setBounds(320, 90, 50, 30);

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 410, 150));

        msgLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        msgLabel.setForeground(new java.awt.Color(204, 0, 0));
        jPanel2.add(msgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, 650, 40));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Quiz Count");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 0, 70, 40));

        searchText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFocusLost(evt);
            }
        });
        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        jPanel2.add(searchText, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 40, 80, 30));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam Id", "Paper Id", "Paper Name", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        table.setSelectionBackground(new java.awt.Color(102, 255, 255));
        table.setSelectionForeground(new java.awt.Color(0, 0, 0));
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
        }

        jScrollPane2.setViewportView(jScrollPane1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 300, 480, 270));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Batch");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 110, 40));

        examIdLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        examIdLabel.setForeground(new java.awt.Color(0, 0, 255));
        jPanel2.add(examIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 60, 30));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Time Limit"));
        jPanel5.setLayout(null);

        timeLimitHourCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        timeLimitHourCombo.setToolTipText("");
        jPanel5.add(timeLimitHourCombo);
        timeLimitHourCombo.setBounds(30, 20, 60, 30);

        timeLimitMiniteCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00", "15", "30", "45" }));
        jPanel5.add(timeLimitMiniteCombo);
        timeLimitMiniteCombo.setBounds(120, 20, 60, 30);

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 440, 210, 70));

        getAllButton.setBackground(new java.awt.Color(102, 102, 102));
        getAllButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getAllButton.setForeground(new java.awt.Color(255, 255, 255));
        getAllButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getAllButton.setText(" All Exam Schedule Report");
        getAllButton.setOpaque(true);
        getAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getAllButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                getAllButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                getAllButtonMouseExited(evt);
            }
        });
        jPanel2.add(getAllButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 40, 180, 30));

        getReportButton.setBackground(new java.awt.Color(102, 102, 102));
        getReportButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getReportButton.setForeground(new java.awt.Color(255, 255, 255));
        getReportButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getReportButton.setText("Get Report");
        getReportButton.setOpaque(true);
        getReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getReportButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                getReportButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                getReportButtonMouseExited(evt);
            }
        });
        jPanel2.add(getReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 530, 110, 40));

        add(jPanel2);
        jPanel2.setBounds(0, 0, 1100, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void createButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createButtonMouseClicked

        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            boolean searchExamIdIsAvailable = ec.searchExamIdIsAvailable(examId);
            if (searchExamIdIsAvailable) {
                JOptionPane.showMessageDialog(null, "This Exam Already Exists", "Warning", 1);
            } else {
                if (pIdText.getText().isEmpty()) {
                    msgLabel.setText(null);
                    JOptionPane.showMessageDialog(null, "Select paper", "Warning", 1);
                } else {

                    boolean questionRange = questionRange();
                    if (questionRange) {
                        boolean questionMark = questionMark();
                        if (questionMark) {
                            boolean passMark = passMark();
                            if (passMark) {
                                boolean dateSet = dateSet();
                                if (dateSet) {
                                    timeSet();
                                    timeLimitSet();
                                    createExam();
                                }
                            }
                        }
                    }

                }

            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_createButtonMouseClicked

    private void qCountLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qCountLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qCountLabelActionPerformed

    private void op3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op3ActionPerformed

    private void op1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op1ActionPerformed

    private void op2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_op2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_op2ActionPerformed

    private void batchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_batchComboItemStateChanged
        getpapersName();
        loardDataTotable();
    }//GEN-LAST:event_batchComboItemStateChanged

    private void batchComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchComboMouseClicked
        getpapersName();
        loardDataTotable();           // TODO add your handling code here:
    }//GEN-LAST:event_batchComboMouseClicked

    private void cemesterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cemesterComboItemStateChanged
        getpapersName();
        loardDataTotable();        // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboItemStateChanged

    private void cemesterComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cemesterComboMouseClicked
        getpapersName();
        loardDataTotable();          // TODO add your handling code here:
    }//GEN-LAST:event_cemesterComboMouseClicked

    private void subjectComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subjectComboItemStateChanged

        getpapersName();
        loardDataTotable();                // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboItemStateChanged

    private void subjectComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectComboMouseClicked

        getpapersName();
        loardDataTotable();      // TODO add your handling code here:
    }//GEN-LAST:event_subjectComboMouseClicked

    private void typeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboItemStateChanged
        try {
            clear();
            msgLabel.setText(null);
            relese.releseManual(pIdText.getText());
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();

            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            String type = null;

            type = typeCombo.getSelectedItem().toString();

            path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
            fileName = type + ".txt";

            boolean goTo = goTo("1");
            if (goTo) {
                //////////////////get Number Of Question//////////////////////////////////////////////

                if (type == null || type.equals("None")) {
                    qCountLabel.setText(null);
                } else {

                    String s = qc.getNumberOfQuestion(path, fileName);
                    qCountLabel.setText(s);
                }
            } else {
                qCountLabel.setText(null);
            }
        } catch (NullPointerException ex) {
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_typeComboItemStateChanged

    private void typeComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseClicked
        try {
            msgLabel.setText(null);
            relese.releseManual(pIdText.getText());
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();

            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            String type = null;

            type = typeCombo.getSelectedItem().toString();

            path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
            fileName = type + ".txt";

            boolean goTo = goTo("1");
            if (goTo) {
                //////////////////get Number Of Question//////////////////////////////////////////////

                if (type == null || type.equals("None")) {
                    qCountLabel.setText(null);
                } else {

                    String s = qc.getNumberOfQuestion(path, fileName);
                    qCountLabel.setText(s);
                }
            } else {
                qCountLabel.setText(null);
            }
        } catch (NullPointerException ex) {
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
        } catch (IOException ex) {
        }
    }//GEN-LAST:event_typeComboMouseClicked

    private void typeComboMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseExited

    }//GEN-LAST:event_typeComboMouseExited

    private void typeComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMousePressed

    }//GEN-LAST:event_typeComboMousePressed

    private void typeComboMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_typeComboMouseReleased

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed

    }//GEN-LAST:event_typeComboActionPerformed

    private void o1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o1ActionPerformed
        o1IsTrue = o1.isSelected();
        if (o1IsTrue) {
            startQ = Integer.toString(1);
            op1.setText(qCountLabel.getText());
            o2IsTrue = false;
            op1.setEditable(true);
            op2.setText(null);
            op3.setText(null);
            op2.setEditable(false);
            op3.setEditable(false);

        }
    }//GEN-LAST:event_o1ActionPerformed

    private void op1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op1KeyReleased
        Validation.numberOnly(op1);
        try {
            int qq = Integer.parseInt(op1.getText());
            int qCount = Integer.parseInt(qCountLabel.getText());
            if (qq > qCount || qq <= 0) {
                op1.setText(null);
            }
        } catch (NumberFormatException ex) {
        }


    }//GEN-LAST:event_op1KeyReleased

    private void o2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_o2ActionPerformed
        o2IsTrue = o2.isSelected();
        if (o2IsTrue) {
            o1IsTrue = false;
            op2.setEditable(true);
            op3.setEditable(false);

            op1.setText(null);
            op1.setEditable(false);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_o2ActionPerformed

    private void op3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op3KeyReleased
        Validation.numberOnly(op3);
        // TODO add your handling code here:
    }//GEN-LAST:event_op3KeyReleased

    private void op2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op2KeyReleased
        Validation.numberOnly(op2);
        try {
            int qq = Integer.parseInt(op2.getText());
            int qCount = Integer.parseInt(qCountLabel.getText());
            if (qq > qCount || qq <= 0) {
                op2.setText(null);
            }

            if (Integer.toString(qq).isEmpty()) {
                op3.setEditable(false);
            } else {
                op3.setEditable(true);
            }
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_op2KeyReleased

    private void bMarkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bMarkKeyReleased
        Validation.numberOnly(bMark);
        try {
            if (Integer.parseInt(aMark.getText()) > Integer.parseInt(bMark.getText())) {

            } else {
                aMark.setText(null);
                bMark.setText(null);
            }
        } catch (NumberFormatException ex) {
        }
    }//GEN-LAST:event_bMarkKeyReleased

    private void cMarkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cMarkKeyReleased
        Validation.numberOnly(cMark);
        try {
            if (Integer.parseInt(bMark.getText()) > Integer.parseInt(cMark.getText())) {

            } else {
                cMark.setText(null);
                bMark.setText(null);
            }
        } catch (NumberFormatException ex) {
        }        // TODO add your handling code here:
    }//GEN-LAST:event_cMarkKeyReleased

    private void wMarkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wMarkKeyReleased
        Validation.numberOnly(wMark);
        try {
            if (Integer.parseInt(cMark.getText()) > Integer.parseInt(wMark.getText())) {

            } else {
                cMark.setText(null);
                wMark.setText(null);
            }
        } catch (NumberFormatException ex) {
        }        // TODO add your handling code here:
    }//GEN-LAST:event_wMarkKeyReleased

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        sendMarksToParent = send.isSelected();
    }//GEN-LAST:event_sendActionPerformed

    private void questionMarksTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_questionMarksTextKeyReleased
        Validation.numberOnly(questionMarksText);
    }//GEN-LAST:event_questionMarksTextKeyReleased

    private void datePikerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datePikerMouseClicked

    }//GEN-LAST:event_datePikerMouseClicked

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        String code = searchText.getText();
        relese.code = code;
        try {
            ExamController examController = ServerConnecter.getServerConnecter().getExamController();
            if (this.code != code) {
                examController.releaseManageExam(this.code);
            } else {
                this.code = code;
            }

            Exam e = examController.SearchExam(code);
            if (e == null) {
                JOptionPane.showMessageDialog(null, "No Exam");
            } else {
                if (examController.reserveManageExam(code)) {
                    examId = e.getExamId();
                    examIdLabel.setText(examId);

                    pIdText.setText(e.getPaperId());
                    qCountLabel.setText(e.getQuizCount());

                    String[] s1 = e.getPath().split("/");
                    batchCombo.setSelectedItem(s1[2]);
                    cemesterCombo.setSelectedItem(s1[3]);
                    subjectCombo.setSelectedItem(s1[4]);
                    typeCombo.setSelectedItem(e.getFileName().replace(".txt", ""));

                    aMark.setText(e.getaMarks());
                    bMark.setText(e.getbMarks());
                    cMark.setText(e.getcMarks());
                    wMark.setText(e.getwMarks());

                    questionMarksText.setText(e.getMarkForOneQuestion());

                    if (e.getStartQ().equals("0")) {
                        o1IsTrue = true;
                        o2IsTrue = false;
                        o1.setSelected(true);
                        o2.setSelected(false);
                        op1.setText(e.getEndQ());
                        op3.setText(null);
                        op2.setText(null);
                    } else {
                        op1.setText(null);
                        o2IsTrue = true;
                        o1IsTrue = false;
                        o1.setSelected(false);
                        o2.setSelected(true);
                        op2.setText(e.getStartQ());
                        op3.setText(e.getEndQ());

                    }

                    if (e.getSendMail().equals("sendMail")) {
                        send.setSelected(true);
                    } else {
                        send.setSelected(false);
                    }

                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    d1 = df.parse(e.getDate());
                    datePiker.setDate(d1);

                    String[] startTime = e.getStartTime().split("-");
                    hourCombo.setSelectedItem(startTime[0]);
                    miniteCombo.setSelectedItem(startTime[1]);

                    String[] timeLimt = e.getTimeLimit().split("-");
                    timeLimitHourCombo.setSelectedItem(timeLimt[0]);
                    timeLimitMiniteCombo.setSelectedItem(timeLimt[1]);

                } else {
                    JOptionPane.showMessageDialog(this, code + " is reserved");
                }

            }

        } catch (NotBoundException | ParseException | NullPointerException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchTextActionPerformed

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        try {
            int res1 = JOptionPane.showConfirmDialog(null, "Do you want to Delete This", "Confirm", JOptionPane.YES_NO_OPTION);
            if (res1 == JOptionPane.YES_OPTION) {
                System.out.println("Yes option");
                if (pIdText.getText() == null || pIdText.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Select Exam");
                } else {
                    try {
                        ExamController ec = ServerConnecter.getServerConnecter().getExamController();
                        StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
                        boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
                        if (IsAvailableFinalExam) {
                            JOptionPane.showMessageDialog(null, "Can't delete Exam at this moment", "Warning", 2);
                        } else {
                            boolean deleteExam = ec.deleteExam(searchText.getText());
                            if (deleteExam) {
                                examIdLabel.setText(null);
                                JOptionPane.showMessageDialog(null, "Exam Deleted Successfully");
                                loardDataTotable();
                            } else {
                                JOptionPane.showMessageDialog(null, "Exam Delete Fail");
                            }

                        }
                    } catch (NotBoundException ex) {
                    } catch (MalformedURLException ex) {
                    } catch (RemoteException ex) {
                    } catch (IOException ex) {
                    }
                }

            }
            if (res1 == JOptionPane.NO_OPTION) {
            }
        } finally {
            try {
                ExamController examController = ServerConnecter.getServerConnecter().getExamController();
                examController.releaseManageExam(this.code);
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(Delete_Admin_Panal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_deleteButtonMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        try {
            StudentController sc = ServerConnecter.getServerConnecter().getStudentController();
            boolean IsAvailableFinalExam = sc.IsAvailableFinalExam(pIdText.getText());
            if (IsAvailableFinalExam) {
                JOptionPane.showMessageDialog(null, "Can't Update Exam at this moment", "Warning", 2);
            } else {
                boolean questionRange = questionRange();
                if (questionRange) {
                    boolean questionMark = questionMark();
                    if (questionMark) {
                        boolean passMark = passMark();
                        if (passMark) {
                            boolean dateSet = dateSet();
                            if (dateSet) {
                                timeSet();
                                timeLimitSet();
                                updateExam();
                            }
                        }
                    }
                }
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_updateButtonMouseClicked

    private void getReportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getReportButtonMouseClicked
        int i = table.getRowCount();
        if (i < 1) {
            JOptionPane.showMessageDialog(null, "No Data");
        } else {
            try {
                InputStream is = getClass().getResourceAsStream("../jasper/ManageExamReport.jrxml");
                JasperReport jr = JasperCompileManager.compileReport(is);
                JasperPrint jp = JasperFillManager.fillReport(jr, new HashMap<String, Object>(), new JRTableModelDataSource(table.getModel()));
                JasperViewer.viewReport(jp, false);
            } catch (JRException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_getReportButtonMouseClicked

    private void searchTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFocusLost
        searchText.setText("Search ExamID");
    }//GEN-LAST:event_searchTextFocusLost

    private void searchTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFocusGained
        searchText.setText(null);// TODO add your handling code here:
    }//GEN-LAST:event_searchTextFocusGained

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        String code = table.getValueAt(table.getSelectedRow(), 0).toString();
        relese.code = code;
        try {
            ExamController examController = ServerConnecter.getServerConnecter().getExamController();
            if (this.code != code) {
                examController.releaseManageExam(this.code);
            } else {
                this.code = code;
            }

            Exam e = examController.SearchExam(code);
            if (e == null) {
                JOptionPane.showMessageDialog(null, "No Exam");
                loardDataTotable();
            } else {
                if (examController.reserveManageExam(code)) {
                    examId = e.getExamId();
                    examIdLabel.setText(examId);
                    searchText.setText(examId);
                    pIdText.setText(e.getPaperId());
                    qCountLabel.setText(e.getQuizCount());

                    String[] s1 = e.getPath().split("/");
                    batchCombo.setSelectedItem(s1[2]);
                    cemesterCombo.setSelectedItem(s1[3]);
                    subjectCombo.setSelectedItem(s1[4]);
                    typeCombo.setSelectedItem(e.getFileName().replace(".txt", ""));

                    aMark.setText(e.getaMarks());
                    bMark.setText(e.getbMarks());
                    cMark.setText(e.getcMarks());
                    wMark.setText(e.getwMarks());

                    questionMarksText.setText(e.getMarkForOneQuestion());

                    if (e.getStartQ().equals("0")) {
                        o1IsTrue = true;
                        o2IsTrue = false;
                        o1.setSelected(true);
                        o2.setSelected(false);
                        op1.setText(e.getEndQ());
                        op3.setText(null);
                        op2.setText(null);
                    } else {
                        op1.setText(null);
                        o2IsTrue = true;
                        o1IsTrue = false;
                        o1.setSelected(false);
                        o2.setSelected(true);
                        op2.setText(e.getStartQ());
                        op3.setText(e.getEndQ());

                    }

                    if (e.getSendMail().equals("sendMail")) {
                        send.setSelected(true);
                    } else {
                        send.setSelected(false);
                    }

                    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
                    d1 = df.parse(e.getDate());
                    datePiker.setDate(d1);

                    String[] startTime = e.getStartTime().split("-");
                    hourCombo.setSelectedItem(startTime[0]);
                    miniteCombo.setSelectedItem(startTime[1]);

                    String[] timeLimt = e.getTimeLimit().split("-");
                    timeLimitHourCombo.setSelectedItem(timeLimt[0]);
                    timeLimitMiniteCombo.setSelectedItem(timeLimt[1]);

                } else {
                    JOptionPane.showMessageDialog(this, code + " is reserved");
                }

            }

        } catch (NotBoundException | ParseException | NullPointerException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_tableMouseClicked

    private void createButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createButtonMouseEntered
        createButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_createButtonMouseEntered

    private void updateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseEntered
        updateButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_updateButtonMouseEntered

    private void deleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseEntered
        deleteButton.setForeground(new Color(102, 255, 255));
    }//GEN-LAST:event_deleteButtonMouseEntered

    private void createButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createButtonMouseExited
        createButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_createButtonMouseExited

    private void updateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseExited
        updateButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_updateButtonMouseExited

    private void deleteButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseExited
        deleteButton.setForeground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonMouseExited

    private void op1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op1KeyPressed
        Validation.numberOnly(op1);
    }//GEN-LAST:event_op1KeyPressed

    private void questionMarksTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_questionMarksTextKeyPressed
        Validation.numberOnly(questionMarksText);
    }//GEN-LAST:event_questionMarksTextKeyPressed

    private void op2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op2KeyPressed
        Validation.numberOnly(op2);
    }//GEN-LAST:event_op2KeyPressed

    private void op3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_op3KeyPressed
        Validation.numberOnly(op3);
    }//GEN-LAST:event_op3KeyPressed

    private void aMarkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aMarkKeyPressed
        Validation.numberOnly(aMark);
    }//GEN-LAST:event_aMarkKeyPressed

    private void aMarkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aMarkKeyReleased
        Validation.numberOnly(aMark);         // TODO add your handling code here:
    }//GEN-LAST:event_aMarkKeyReleased

    private void bMarkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bMarkKeyPressed
        Validation.numberOnly(bMark);
    }//GEN-LAST:event_bMarkKeyPressed

    private void cMarkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cMarkKeyPressed
        Validation.numberOnly(cMark);
    }//GEN-LAST:event_cMarkKeyPressed

    private void wMarkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wMarkKeyPressed
        Validation.numberOnly(wMark);
    }//GEN-LAST:event_wMarkKeyPressed

    private void getAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getAllButtonMouseClicked
        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            ArrayList<Exam> allExam = ec.geAlltExams();
            ArrayList<MoreExam> newList = new ArrayList<MoreExam>();

            for (Exam e : allExam) {
                MoreExam m = new MoreExam();
                System.out.println("UI: " + e.getExamId());
                m.setExamId(e.getExamId());
                m.setPaperId(e.getPaperId());
                m.setPaperName(e.getFileName().replace(".txt", ""));
                m.setDate(e.getDate());
                newList.add(m);
            }
            if (allExam.size() == 0) {
                JOptionPane.showMessageDialog(null, "No Data");
            } else {
                InputStream is = getClass().getResourceAsStream("../jasper/ManageExamReport_1.jrxml");
                JasperReport jr = JasperCompileManager.compileReport(is);
                JasperPrint jp = JasperFillManager.fillReport(jr, new HashMap<String, Object>(), new JRBeanCollectionDataSource(newList));
                JasperViewer.viewReport(jp, false);
            }

        } catch (NotBoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JRException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_getAllButtonMouseClicked

    private void getReportButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getReportButtonMouseEntered
        getReportButton.setForeground(new Color(102, 255, 255));        // TODO add your handling code here:
    }//GEN-LAST:event_getReportButtonMouseEntered

    private void getAllButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getAllButtonMouseEntered
        getAllButton.setForeground(new Color(102, 255, 255));        // TODO add your handling code here:
    }//GEN-LAST:event_getAllButtonMouseEntered

    private void getReportButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getReportButtonMouseExited
        getReportButton.setForeground(Color.white);         // TODO add your handling code here:
    }//GEN-LAST:event_getReportButtonMouseExited

    private void getAllButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getAllButtonMouseExited
        getAllButton.setForeground(Color.white);         // TODO add your handling code here:
    }//GEN-LAST:event_getAllButtonMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aMark;
    private javax.swing.JTextField bMark;
    private javax.swing.JComboBox batchCombo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cMark;
    private javax.swing.JComboBox cemesterCombo;
    private javax.swing.JLabel createButton;
    private org.jdesktop.swingx.JXDatePicker datePiker;
    private javax.swing.JLabel deleteButton;
    private javax.swing.JLabel examIdLabel;
    private javax.swing.JLabel getAllButton;
    private javax.swing.JLabel getReportButton;
    private javax.swing.JComboBox hourCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox miniteCombo;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JRadioButton o1;
    private javax.swing.JRadioButton o2;
    private javax.swing.JTextField op1;
    private javax.swing.JTextField op2;
    private javax.swing.JTextField op3;
    private javax.swing.JTextField pIdText;
    private javax.swing.JTextField qCountLabel;
    private javax.swing.JTextField questionMarksText;
    private javax.swing.JTextField searchText;
    private javax.swing.JRadioButton send;
    private javax.swing.JComboBox subjectCombo;
    private javax.swing.JTable table;
    private javax.swing.JComboBox timeLimitHourCombo;
    private javax.swing.JComboBox timeLimitMiniteCombo;
    private javax.swing.JComboBox typeCombo;
    private javax.swing.JLabel updateButton;
    private javax.swing.JTextField wMark;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param qNumber
     * @return get question
     */
    public boolean goTo(String qNumber) {
        boolean ans = true;
        try {
            String code2 = null;
            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            String type = null;

            type = typeCombo.getSelectedItem().toString();

            String path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
            String fileName = type + ".txt";

            if (type == null || type.equals("None")) {
                qCountLabel.setText(null);
                pIdText.setText(null);
            } else {

                QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
                Question q = qc.SearchQuestion("Q", qNumber, path, fileName);

                if (q == null) {

                } else {
                    code2 = q.getPaperId();
                    relese.code2 = code2;

                    if (this.code2 != code2) {
                        relese.releseManual(code2);
                    } else {
                        this.code2 = code2;
                    }

                    if (code2 == null || code2.isEmpty()) {

                    } else {
                        System.out.println("code2: " + code2);
                        if (qc.reservePaper(code2)) {
                            ////////////set data//////////////
                            pIdText.setText(q.getPaperId());
                        } else {
                            msgLabel.setText(code2 + " is reserved");
                            ans = false;

                        }
                    }

                }
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ans;
    }

    /**
     *
     */
    public void getpapersName() {
        try {
            String batch = batchCombo.getSelectedItem().toString();
            String cemester = cemesterCombo.getSelectedItem().toString();
            String subject = subjectCombo.getSelectedItem().toString();

            path = "./Database/Papers/" + batch + "/" + cemester + "/" + subject;
        } catch (NullPointerException ex) {
        }

        try {
            QuestionController qc = ServerConnecter.getServerConnecter().getQuestionController();
            ArrayList<String> papersNameList = qc.getPapersName(path);
            if (papersNameList == null) {
                typeCombo.removeAllItems();
                typeCombo.addItem("None");
            } else {
                typeCombo.removeAllItems();
                typeCombo.addItem("None");
                for (String s : papersNameList) {
                    String ss = s.replace(".txt", "");
                    typeCombo.addItem(ss);
                }

            }

        } catch (MalformedURLException | RemoteException | NotBoundException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageQuestion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     *
     */
    public void fillCombo() {

        try {
            BatchController bc = ServerConnecter.getServerConnecter().getBatchController();
            SemesterController cc = ServerConnecter.getServerConnecter().getCemesterController();
            SubjectController sc = ServerConnecter.getServerConnecter().getSubjectController();

            ////batch combo
            ArrayList<Batch> allBatch = bc.getAllBatch();
            batchCombo.removeAll();
            for (Batch b : allBatch) {
                batchCombo.addItem(b.getBatchName());
            }

            ////Cemster Combo
            ArrayList<Cemester> allCemester = cc.getAllCemester();
            cemesterCombo.removeAll();
            for (Cemester c : allCemester) {
                cemesterCombo.addItem(c.getCemesterName());
            }

            /////Subject Combo
            ArrayList<Subject> allSubject = sc.getAllSubject();
            subjectCombo.removeAll();
            for (Subject s : allSubject) {
                subjectCombo.addItem(s.getSubjectName());
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Add_Student_Panal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     * @return
     */
    public boolean passMark() {
        boolean ans = false;
//////////////////////Pass Mark////////////////////////////////////////////////
        try {
            if (aMark.getText().isEmpty() || bMark.getText().isEmpty() || cMark.getText().isEmpty() || wMark.getText().isEmpty()) {
                msgLabel.setText("Enter Pass Marks");
            } else {
                msgLabel.setText(null);

                aMarks = aMark.getText();
                bMarks = bMark.getText();
                cMarks = cMark.getText();
                wMarks = wMark.getText();
                ans = true;
            }
        } catch (NullPointerException | NumberFormatException ex) {
        }
        return ans;

    }

    /**
     *
     * @return
     */
    public boolean dateSet() {
        boolean ans = false;
        ///////////////////////Date//////////////////////////////////////////////////////////
        try {
            if (datePiker.getDate() != null) {
                sf = new SimpleDateFormat("yyyy-MM-dd");
                d1 = datePiker.getDate();
                date = sf.format(d1);
                msgLabel.setText(null);

                ExamController examController = ServerConnecter.getServerConnecter().getExamController();
                boolean IsExamAvailable = examController.IsExamAvailable(date, examId);
                if (IsExamAvailable == false) {
                    msgLabel.setText(null);
                    ans = true;
                } else {
                    msgLabel.setText("Can't put Exam On " + date);
                    ans = false;
                }

            } else {

                msgLabel.setText("Select Date");

            }
        } catch (NullPointerException | NumberFormatException ex) {
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }

        return ans;
    }

    /**
     *
     * @return
     */
    public boolean questionRange() {
        boolean ans = false;
        try {
            if (o1IsTrue) {
                msgLabel.setText(null);

                startQ = "1";
                endQ = op1.getText();
                ans = true;
            } else if (o2IsTrue) {

                int qq = Integer.parseInt(op3.getText());
                int qCount = Integer.parseInt(qCountLabel.getText());
                if (qq > qCount || qq <= 0) {
                    op3.setText(null);
                }

                if (Integer.parseInt(op2.getText()) > Integer.parseInt(op3.getText()) || Integer.parseInt(op2.getText()) == Integer.parseInt(op3.getText())) {
                    op2.setText(null);
                    op3.setText(null);
                    op3.setEditable(false);
                }

                if (Integer.parseInt(op3.getText()) < Integer.parseInt(op2.getText()) || Integer.parseInt(op2.getText()) == Integer.parseInt(op3.getText())) {
                    op2.setText(null);
                    op3.setText(null);
                    op3.setEditable(false);
                }

                if (op3.getText().isEmpty() || op3.getText() == null || op2.getText().isEmpty() || op2.getText() == null) {
                    msgLabel.setText("Enter Question Range");
                } else {
                    msgLabel.setText(null);
                    startQ = op2.getText();
                    endQ = op3.getText();
                    ans = true;
                }

            } else {
                msgLabel.setText("Select Question Range");

            }

        } catch (NullPointerException | NumberFormatException ex) {
        }
        return ans;
    }

    /**
     *
     */
    public void timeSet() {
        try {
            String hour = hourCombo.getSelectedItem().toString();
            String minite = miniteCombo.getSelectedItem().toString();
            String amPm = null;
            if (hour.equals("13")) {
                amPm = "PM";
            } else if (hour.equals("14")) {
                amPm = "PM";
            } else if (hour.equals("15")) {
                amPm = "PM";
            } else if (hour.equals("16")) {
                amPm = "PM";
            } else if (hour.equals("17")) {
                amPm = "PM";
            } else {
                amPm = "AM";
            }

            time = hour + "-" + minite + "-" + "00" + " " + amPm;

        } catch (NullPointerException | NumberFormatException ex) {
        }
    }

    /**
     *
     * @return
     */
    public boolean questionMark() {
        boolean ans = false;
        try {

            if (questionMarksText.getText().isEmpty()) {
                ans = false;
                msgLabel.setText("Enter Marks for One Question");
            } else {
                ans = true;
                msgLabel.setText(null);
                questionMarks = questionMarksText.getText();
            }
        } catch (NullPointerException | NumberFormatException ex) {
        }
        return ans;
    }

    /**
     *
     */
    public void createExam() {
        String sendMail;
        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();

            if (sendMarksToParent) {
                sendMail = "sendMail";
            } else {
                sendMail = "don'tSendMail";
            }
            getId();
            ec.writeExamId(examIdLabel.getText());
            Exam e = new Exam(examId, path, fileName, startQ, endQ, aMarks, bMarks, cMarks, wMarks, date, time, timeLimit, sendMail, questionMarks, qCountLabel.getText(), pIdText.getText());
            boolean isTrue = ec.addExam(e);
            if (isTrue) {
                JOptionPane.showMessageDialog(null, "Exam Added Successfully");
                examIdLabel.setText(null);

                loardDataTotable();
            } else {
                JOptionPane.showMessageDialog(null, "Exam Added Fail");
            }

        } catch (NotBoundException ex) {
        } catch (MalformedURLException ex) {
        } catch (RemoteException ex) {
        } catch (IOException ex) {
        }
    }

    /**
     *
     */
    public void timeLimitSet() {
        try {
            String hour = timeLimitHourCombo.getSelectedItem().toString();
            String minite = timeLimitMiniteCombo.getSelectedItem().toString();

            timeLimit = hour + "-" + minite;

        } catch (NullPointerException | NumberFormatException ex) {
        }
    }

    /**
     *
     */
    public void loardDataTotable() {
        //////////loard table data////////////////
        DefaultTableModel dtm = new DefaultTableModel();
        dtm = (DefaultTableModel) table.getModel();
//        table.getTableHeader().setBackground(Color.blue);
        dtm.setRowCount(0);
        table.setRowHeight(25);

        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            ArrayList<Exam> allExam = ec.getExams(path);
            for (Exam e : allExam) {
                Object[] row = {e.getExamId(), e.getPaperId(), e.getFileName().replace(".txt", ""), e.getDate()};
                dtm.addRow(row);
            }

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     */
    public void updateExam() {
        try {
            String sendMail;
            try {
                ExamController examController = ServerConnecter.getServerConnecter().getExamController();

                if (sendMarksToParent) {
                    sendMail = "sendMail";
                } else {
                    sendMail = "don'tSendMail";
                }

                Exam exam = new Exam(examId, path, fileName, startQ, endQ, aMarks, bMarks, cMarks, wMarks, date, time, timeLimit, sendMail, questionMarks, qCountLabel.getText(), pIdText.getText());
                boolean isTrue = examController.updateExam(exam);
                if (isTrue) {
                    examIdLabel.setText(null);
                    JOptionPane.showMessageDialog(null, "Exam Updated Successfully");

                    loardDataTotable();
                } else {
                    JOptionPane.showMessageDialog(null, "Exam Update Fail");
                    loardDataTotable();
                }

            } catch (NotBoundException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            try {
                ExamController examController = ServerConnecter.getServerConnecter().getExamController();
                examController.releaseManageExam(this.code);
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(Delete_Admin_Panal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /////////////////////////////////////////////////////  
    /**
     *
     */
    public void clear() {
        o2IsTrue = false;
        o1IsTrue = false;
        o1.setSelected(false);
        o2.setSelected(false);
        send.setSelected(false);
        op1.setText(null);
        op2.setText(null);
        op3.setText(null);

        aMark.setText(null);
        bMark.setText(null);
        cMark.setText(null);
        wMark.setText(null);
        datePiker.setDate(null);
        questionMarksText.setText(null);
        hourCombo.setSelectedIndex(0);
        miniteCombo.setSelectedIndex(0);
        timeLimitHourCombo.setSelectedIndex(0);
        timeLimitMiniteCombo.setSelectedIndex(0);

    }

    /**
     *
     */
    public void getId() {
        try {
            ExamController ec = ServerConnecter.getServerConnecter().getExamController();
            examId = ec.getNewExamId();
            examIdLabel.setText(examId);

            clear();
        } catch (NotBoundException ex) {
        } catch (MalformedURLException ex) {
        } catch (RemoteException ex) {
        } catch (IOException ex) {
        }
    }

    /**
     *
     * @param message
     */
    public void updateMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
}
